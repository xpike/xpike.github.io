{
  "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IServiceCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike IOC in Asp.Net Core. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.AspNetCore Assembly : XPike.IoC.Microsoft.AspNetCore.dll Syntax public static class IServiceCollectionExtensions Methods AddXPikeDependencyInjection(IServiceCollection) Adds xPike dependency injection support. Declaration public static IDependencyCollection AddXPikeDependencyInjection(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IDependencyCollection IDependencyCollection."
  },
  "api/ioc/api/XPike.IoC.IDependencyPackage.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyPackage.html",
    "title": "Interface IDependencyPackage | xPike",
    "keywords": "Interface IDependencyPackage Implemented by dependency packages Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public interface IDependencyPackage Methods RegisterPackage(IDependencyCollection) Registers the package with the provided IDependencyCollection . Declaration void RegisterPackage(IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection in which to perform the registrations."
  },
  "api/ioc/api/XPike.IoC.IDependencyCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions IDependencyCollection Extensions. Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public static class IDependencyCollectionExtensions Methods LoadPackage(IDependencyCollection, IDependencyPackage) Can be optionally used to reduce the overhead of repeatedly registering the same packages once they are loaded. Declaration public static IDependencyCollection LoadPackage(this IDependencyCollection dependencyCollection, IDependencyPackage package) Parameters Type Name Description IDependencyCollection dependencyCollection This instance. IDependencyPackage package The package to load. Returns Type Description IDependencyCollection"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.html",
    "title": "Namespace XPike.Extensions.DependencyInjection | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection Classes IServiceCollectionExtensions Extension methods for IServiceCollection. IServiceProviderExtensions Extension methods for IServiceProvider, to enhance the features and functionality of Microsoft.Extensions.DependencyInjection. ServiceProviderVerificationException A ServiceProviderVerificationException is thrown when the container fails to verify. VerificationResult Encapsulates the result of a failed attempt to verify a registered type in the container."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.html",
    "title": "Namespace XPike.Extensions.DependencyInjection.WebApi | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection.WebApi Classes IServiceCollectionExtensions Extension methods for IServiceCollection to support using Microsoft.Extensions.DependencyInjection in ASP.Net WebAPI. MicrosoftDependencyResolver Class MicrosoftDependencyResolver. This class cannot be inherited. Implements the"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.IServiceCollectionExtensions.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support using Microsoft.Extensions.DependencyInjection in ASP.Net WebAPI. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection.WebApi Assembly : XPike.Extensions.DependencyInjection.WebApi.dll Syntax public static class IServiceCollectionExtensions Methods AddApiControllers(IServiceCollection) Adds the API controllers to the service collection with a scoped lifetime. Declaration public static IServiceCollection AddApiControllers(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IServiceCollection IServiceCollection."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceProviderExtensions.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceProviderExtensions.html",
    "title": "Class IServiceProviderExtensions | xPike",
    "keywords": "Class IServiceProviderExtensions Extension methods for IServiceProvider, to enhance the features and functionality of Microsoft.Extensions.DependencyInjection. Inheritance System.Object IServiceProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public static class IServiceProviderExtensions Methods Verify(IServiceProvider) Verifies the dependency graph for completeness and valid dependency lifetimes. This method is thread-safe. Declaration public static void Verify(this IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider This IServiceProvider instance. Remarks This method also ensures that singletons only depend on other singletons and that scoped objects only depend on singletons and other scoped objects. Having a singleton depend on a transient object effectively makes that transient object a singleton and could result in undesired behavior. Examples public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.ApplicationServices.Verify(); ... app.UseMvc(); } Exceptions Type Condition System.InvalidOperationException The container has already been verified. System.InvalidOperationException IServiceCollection must be registerd in order to verify the provider. Verify() needs to obtain the list of registered services from the IServiceCollection instance. ServiceProviderVerificationException The container is invalid."
  },
  "api/ioc/api/XPike.IoC.html": {
    "href": "api/ioc/api/XPike.IoC.html",
    "title": "Namespace XPike.IoC | xPike",
    "keywords": "Namespace XPike.IoC Classes DependencyVerificationException A DependencyVerificationException is thrown when the container fails to verify. IDependencyCollectionExtensions IDependencyCollection Extensions. Interfaces IDependencyCollection Interface implememented by all dependency injection providers for registering services. IDependencyPackage Implemented by dependency packages IDependencyProvider Interface implememented by all dependency injection providers for resolving services and their dependencies."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.html",
    "title": "Namespace XPike.IoC.SimpleInjector | xPike",
    "keywords": "Namespace XPike.IoC.SimpleInjector Classes HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. SimpleInjectorDependencyCollection SimpleInjectorDependencyProvider"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.HttpConfigurationExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.HttpConfigurationExtensions.html",
    "title": "Class HttpConfigurationExtensions | xPike",
    "keywords": "Class HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object HttpConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.WebAPI.dll Syntax public static class HttpConfigurationExtensions Methods UseXPikeDependencyInjection(HttpConfiguration, IDependencyProvider) Uses the xPike dependency injection for resolving dependencies. Declaration public static HttpConfiguration UseXPikeDependencyInjection(this HttpConfiguration config, IDependencyProvider dependencyProvider) Parameters Type Name Description HttpConfiguration config The configuration. IDependencyProvider dependencyProvider The dependency provider. Returns Type Description HttpConfiguration HttpConfiguration"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.html",
    "title": "Namespace XPike.IoC.SimpleInjector.AspNetCore | xPike",
    "keywords": "Namespace XPike.IoC.SimpleInjector.AspNetCore Classes IApplicationBuilderExtensions IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike dependency injection abscrations."
  },
  "api/ioc/api/XPike.IoC.Owin.html": {
    "href": "api/ioc/api/XPike.IoC.Owin.html",
    "title": "Namespace XPike.IoC.Owin | xPike",
    "keywords": "Namespace XPike.IoC.Owin Classes IAppBuilderExtensions Extension methods for IAppBuilder so support xPike dependency injection. XPikeDependencyInjectionMiddleware OWIN Middleware for using XPike Dependency Injection with OWIN hosted services. Implements the"
  },
  "api/ioc/api/XPike.IoC.Owin.XPikeDependencyInjectionMiddleware.html": {
    "href": "api/ioc/api/XPike.IoC.Owin.XPikeDependencyInjectionMiddleware.html",
    "title": "Class XPikeDependencyInjectionMiddleware | xPike",
    "keywords": "Class XPikeDependencyInjectionMiddleware OWIN Middleware for using XPike Dependency Injection with OWIN hosted services. Implements the Inheritance System.Object XPikeDependencyInjectionMiddleware Namespace : XPike.IoC.Owin Assembly : XPike.IoC.Owin.dll Syntax public class XPikeDependencyInjectionMiddleware : OwinMiddleware Constructors XPikeDependencyInjectionMiddleware(OwinMiddleware, IDependencyProvider) Initializes a new instance of the XPikeDependencyInjectionMiddleware class. Declaration public XPikeDependencyInjectionMiddleware(OwinMiddleware next, IDependencyProvider dependencyProvider) Parameters Type Name Description OwinMiddleware next The next middleware in the pipeline. IDependencyProvider dependencyProvider The dependency provider instance. Methods Invoke(IOwinContext) Process an individual request. Declaration public override Task Invoke(IOwinContext context) Parameters Type Name Description IOwinContext context The context. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IApplicationBuilderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IApplicationBuilderExtensions.html",
    "title": "Class IApplicationBuilderExtensions | xPike",
    "keywords": "Class IApplicationBuilderExtensions Extension methods for IApplicationBuilder to support xPike IoC in Asp.Net Core Inheritance System.Object IApplicationBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.AspNetCore Assembly : XPike.IoC.Microsoft.AspNetCore.dll Syntax public static class IApplicationBuilderExtensions Methods UseXPikeDependencyInjection(IApplicationBuilder) Tells the application to use xPike dependency injection for resolution. Declaration public static IDependencyProvider UseXPikeDependencyInjection(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app The application builder instance. Returns Type Description IDependencyProvider IDependencyProvider. Exceptions Type Condition System.ArgumentNullException app - Extension methods require an instance."
  },
  "api/ioc/api/XPike.IoC.IDependencyProvider.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyProvider.html",
    "title": "Interface IDependencyProvider | xPike",
    "keywords": "Interface IDependencyProvider Interface implememented by all dependency injection providers for resolving services and their dependencies. Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public interface IDependencyProvider Methods BeginScope() Creates a new scope for managing the lifetime of scoped instance registrations. Declaration IDisposable BeginScope() Returns Type Description System.IDisposable IDisposable Examples using(var scope = dependencyProvider.BeginScope()) { var foo = dependencyProvider.ResolveDependecy(typeof(IFoo)); } ResolveDependencies<TService>() Resolves an enumerable of implementations for TService . Declaration IEnumerable<TService> ResolveDependencies<TService>() where TService : class Returns Type Description System.Collections.Generic.IEnumerable <TService> An enumerable of instances of TService . Type Parameters Name Description TService The service type to resolve. ResolveDependency(Type) Resolves a dependency for the provided type. Declaration object ResolveDependency(Type serviceType) Parameters Type Name Description System.Type serviceType The service type to resolve. Returns Type Description System.Object An instance of serviceType . ResolveDependency<TService>() Resolves a dependency for the provided type. Declaration TService ResolveDependency<TService>() where TService : class Returns Type Description TService An instance of TService . Type Parameters Name Description TService The service type to resolve. Verify() Verifies the dependency graph for completeness. Declaration void Verify() Exceptions Type Condition DependencyVerificationException When verification fails. Extension Methods IDependencyProviderExtensions.GetContainer(IDependencyProvider)"
  },
  "api/ioc/api/XPike.IoC.IDependencyCollection.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyCollection.html",
    "title": "Interface IDependencyCollection | xPike",
    "keywords": "Interface IDependencyCollection Interface implememented by all dependency injection providers for registering services. Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public interface IDependencyCollection Remarks Expected Implementation Behavior xPike modules expect that the RegisterXXXX(...) methods will replace an existing registration if on already exists for the supplied service type. This allows you to override default registration with your own without having to first remove any existing registrations. Methods AddSingletonToCollection(Type, Type) For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. AddSingletonToCollection<TService>(TService) For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection<TService>(TService instance) where TService : class Parameters Type Name Description TService instance The instance. Type Parameters Name Description TService The type of the service. AddSingletonToCollection<TService, TImplementation>() For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection<TService, TImplementation>() where TService : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService>) For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService> implementationFactory) where TService : class where TImplementation : class, TService Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. TImplementation The implementation type the delegate will return. BuildDependencyProvider(Boolean) Builds the dependency provider. Declaration IDependencyProvider BuildDependencyProvider(bool verifyOnBuild = true) Parameters Type Name Description System.Boolean verifyOnBuild if set to true , Verify() will be called implicitly. Returns Type Description IDependencyProvider IDependencyProvider. RegisterScoped(Type, Type) Adds a service to the container with a scoped lifetime. Declaration void RegisterScoped(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. RegisterScoped<TService>(Func<IDependencyProvider, TService>) Registers a service with a scoped lifetime. Declaration void RegisterScoped<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. RegisterScoped<TService, TImplementation>() Adds a service to the container with a scoped lifetime. Declaration void RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. RegisterSingleton(Type, Type) Adds a service to the container as a singleton. Declaration void RegisterSingleton(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType The interface type. System.Type implementationType The implementation type. RegisterSingleton<TService>(TService) Adds a service to the container as a singleton. Declaration void RegisterSingleton<TService>(TService instance) where TService : class Parameters Type Name Description TService instance The instance. Type Parameters Name Description TService The type of the t service. RegisterSingleton<TService>(Func<IDependencyProvider, TService>) Adds a service to the container as a singleton. Declaration void RegisterSingleton<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. RegisterSingleton<TService, TImplementation>() Adds a service to the container as a singleton. Declaration void RegisterSingleton<TService, TImplementation>() where TService : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. RegisterSingletonFallback(Type, Type) Adds a service to the container as a singleton. Declaration void RegisterSingletonFallback(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. RegisterTransient(Type, Type) Adds a service to the container with a transient lifetime. Declaration void RegisterTransient(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. RegisterTransient<TService>(Func<IDependencyProvider, TService>) Adds a service to the container with a transient lifetime. Declaration void RegisterTransient<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. RegisterTransient<TService, TImplementation>() Adds a service to the container with a transient lifetime. Declaration void RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. ResetCollection<TService>() Clears all registrations for type TService . Declaration void ResetCollection<TService>() Type Parameters Name Description TService The type of the service. Extension Methods IDependencyCollectionExtensions.LoadPackage(IDependencyCollection, IDependencyPackage) IDependencyCollectionExtensions.GetContainer(IDependencyCollection) IDependencyCollectionExtensions.Configure(IDependencyCollection, HttpConfiguration)"
  },
  "api/ioc/api/XPike.IoC.DependencyVerificationException.html": {
    "href": "api/ioc/api/XPike.IoC.DependencyVerificationException.html",
    "title": "Class DependencyVerificationException | xPike",
    "keywords": "Class DependencyVerificationException A DependencyVerificationException is thrown when the container fails to verify. Inheritance System.Object System.Exception DependencyVerificationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax [Serializable] public class DependencyVerificationException : Exception, ISerializable, _Exception Constructors DependencyVerificationException(Exception[]) Initializes a new instance of the DependencyVerificationException class. Declaration public DependencyVerificationException(Exception[] exceptions) Parameters Type Name Description System.Exception [] exceptions The exceptions. DependencyVerificationException(SerializationInfo, StreamingContext) Initializes a new instance of the DependencyVerificationException class. Declaration protected DependencyVerificationException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo The serialization information. System.Runtime.Serialization.StreamingContext streamingContext The streaming context. Properties Exceptions Gets a list of exceptions that occurred during verification. Declaration public IEnumerable<Exception> Exceptions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Exception > An array of exceptions. Remarks Different containers will throw different exceptions. Don't assume these exceptions will be the same across DI implementations. DependencyVerificationException is the abstraction. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also System.Exception"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.MicrosoftDependencyResolver.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.MicrosoftDependencyResolver.html",
    "title": "Class MicrosoftDependencyResolver | xPike",
    "keywords": "Class MicrosoftDependencyResolver Class MicrosoftDependencyResolver. This class cannot be inherited. Implements the Inheritance System.Object MicrosoftDependencyResolver Namespace : XPike.Extensions.DependencyInjection.WebApi Assembly : XPike.Extensions.DependencyInjection.WebApi.dll Syntax public sealed class MicrosoftDependencyResolver : IDependencyResolver Constructors MicrosoftDependencyResolver(IServiceProvider) Initializes a new instance of the MicrosoftDependencyResolver class. Declaration public MicrosoftDependencyResolver(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The service provider. Methods BeginScope() Starts a resolution scope. Declaration public IDependencyScope BeginScope() Returns Type Description IDependencyScope The dependency scope. Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() GetService(Type) Retrieves a service from the scope. Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType The service to be retrieved. Returns Type Description System.Object The retrieved service. GetServices(Type) Retrieves a collection of services from the scope. Declaration public IEnumerable<object> GetServices(Type serviceType) Parameters Type Name Description System.Type serviceType The collection of services to be retrieved. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The retrieved collection of services."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.ServiceProviderVerificationException.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.ServiceProviderVerificationException.html",
    "title": "Class ServiceProviderVerificationException | xPike",
    "keywords": "Class ServiceProviderVerificationException A ServiceProviderVerificationException is thrown when the container fails to verify. Inheritance System.Object System.Exception ServiceProviderVerificationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax [Serializable] public class ServiceProviderVerificationException : Exception, ISerializable, _Exception Constructors ServiceProviderVerificationException(IEnumerable<VerificationResult>) Initializes a new instance of the ServiceProviderVerificationException class. Declaration public ServiceProviderVerificationException(IEnumerable<VerificationResult> results) Parameters Type Name Description System.Collections.Generic.IEnumerable < VerificationResult > results The exceptions. ServiceProviderVerificationException(SerializationInfo, StreamingContext) Initializes a new instance of the ServiceProviderVerificationException class. Declaration protected ServiceProviderVerificationException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo The serialization information. System.Runtime.Serialization.StreamingContext streamingContext The streaming context. Exceptions Type Condition System.NotImplementedException Properties Restults Gets a list of VerificationResult s that occurred during verification. Declaration public IEnumerable<VerificationResult> Restults { get; } Property Value Type Description System.Collections.Generic.IEnumerable < VerificationResult > An array of exceptions. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also System.Exception"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceCollectionExtensions.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public static class IServiceCollectionExtensions Methods AddServiceProviderVerification(IServiceCollection) Configures the service collection so it can later be verfied by the service provider. Declaration public static IServiceCollection AddServiceProviderVerification(this IServiceCollection services) Parameters Type Name Description IServiceCollection services This IServicesCollection instance. Returns Type Description IServiceCollection IServiceCollection."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyProvider.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyProvider.html",
    "title": "Class SimpleInjectorDependencyProvider | xPike",
    "keywords": "Class SimpleInjectorDependencyProvider Inheritance System.Object SimpleInjectorDependencyProvider Implements IDependencyProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.dll Syntax public class SimpleInjectorDependencyProvider : IDependencyProvider Properties Container Declaration public Container Container { get; } Property Value Type Description Container Methods BeginScope() Declaration public IDisposable BeginScope() Returns Type Description System.IDisposable ResolveDependencies<TService>() Declaration public IEnumerable<TService> ResolveDependencies<TService>() where TService : class Returns Type Description System.Collections.Generic.IEnumerable <TService> Type Parameters Name Description TService ResolveDependency(Type) Declaration public object ResolveDependency(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object ResolveDependency<TService>() Declaration public TService ResolveDependency<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService Verify() Declaration public void Verify() Implements IDependencyProvider Extension Methods IDependencyProviderExtensions.GetContainer(IDependencyProvider)"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IApplicationBuilderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IApplicationBuilderExtensions.html",
    "title": "Class IApplicationBuilderExtensions | xPike",
    "keywords": "Class IApplicationBuilderExtensions Inheritance System.Object IApplicationBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector.AspNetCore Assembly : XPike.IoC.SimpleInjector.AspNetCore.dll Syntax public static class IApplicationBuilderExtensions Methods UseXPikeDependencyInjection(IApplicationBuilder, Action<SimpleInjectorUseOptions>) Declaration public static IDependencyProvider UseXPikeDependencyInjection(this IApplicationBuilder app, Action<SimpleInjectorUseOptions> options = null) Parameters Type Name Description IApplicationBuilder app System.Action < SimpleInjectorUseOptions > options Returns Type Description IDependencyProvider"
  },
  "api/ioc/api/XPike.IoC.Owin.IAppBuilderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Owin.IAppBuilderExtensions.html",
    "title": "Class IAppBuilderExtensions | xPike",
    "keywords": "Class IAppBuilderExtensions Extension methods for IAppBuilder so support xPike dependency injection. Inheritance System.Object IAppBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Owin Assembly : XPike.IoC.Owin.dll Syntax public static class IAppBuilderExtensions Methods UseXPikeDependencyInjection(IAppBuilder, Func<IDependencyProvider>) Uses xPike dependency injection. Declaration public static IAppBuilder UseXPikeDependencyInjection(this IAppBuilder app, Func<IDependencyProvider> dependencyProviderFactoryDelegate) Parameters Type Name Description IAppBuilder app The application. System.Func < IDependencyProvider > dependencyProviderFactoryDelegate The dependency provider factory delegate. Returns Type Description IAppBuilder IAppBuilder. UseXPikeDependencyInjection(IAppBuilder, IDependencyProvider) Uses xPike dependency injection. Declaration public static IAppBuilder UseXPikeDependencyInjection(this IAppBuilder app, IDependencyProvider dependencyProvider) Parameters Type Name Description IAppBuilder app The application. IDependencyProvider dependencyProvider The dependency provider. Returns Type Description IAppBuilder IAppBuilder. UseXPikeDependencyInjection(IAppBuilder, IDependencyProvider, IDependencyPackage) Uses xPike dependency injection. Declaration public static IAppBuilder UseXPikeDependencyInjection(this IAppBuilder app, IDependencyProvider dependencyProvider, IDependencyPackage applicationPackage) Parameters Type Name Description IAppBuilder app The application. IDependencyProvider dependencyProvider The dependency provider. IDependencyPackage applicationPackage The application package. Returns Type Description IAppBuilder IAppBuilder."
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.HttpConfigurationExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.HttpConfigurationExtensions.html",
    "title": "Class HttpConfigurationExtensions | xPike",
    "keywords": "Class HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object HttpConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.WebApi Assembly : XPike.IoC.Microsoft.WebApi.dll Syntax public static class HttpConfigurationExtensions Methods UseXPikeDependencyInjection(HttpConfiguration, IDependencyProvider) Uses the xPike dependency injection for resolving dependencies. Declaration public static HttpConfiguration UseXPikeDependencyInjection(this HttpConfiguration config, IDependencyProvider dependencyProvider) Parameters Type Name Description HttpConfiguration config The configuration. IDependencyProvider dependencyProvider The dependency provider. Returns Type Description HttpConfiguration HttpConfiguration"
  },
  "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.html",
    "title": "Namespace XPike.IoC.Microsoft.AspNetCore | xPike",
    "keywords": "Namespace XPike.IoC.Microsoft.AspNetCore Classes IApplicationBuilderExtensions Extension methods for IApplicationBuilder to support xPike IoC in Asp.Net Core IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike IOC in Asp.Net Core."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.VerificationResult.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.VerificationResult.html",
    "title": "Class VerificationResult | xPike",
    "keywords": "Class VerificationResult Encapsulates the result of a failed attempt to verify a registered type in the container. Inheritance System.Object VerificationResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public class VerificationResult Constructors VerificationResult(ServiceDescriptor, Exception, String) Initializes a new instance of the VerificationResult class. Declaration public VerificationResult(ServiceDescriptor descriptor, Exception exception = null, string message = null) Parameters Type Name Description ServiceDescriptor descriptor The ServiceDescriptor being verified. System.Exception exception The exception thrown, if any. System.String message The verification message. Exceptions Type Condition System.ArgumentNullException descriptor Properties Exception Gets the exception that caused the verification to fail. Declaration public Exception Exception { get; } Property Value Type Description System.Exception The exception. Message Gets the verification message. Declaration public string Message { get; } Property Value Type Description System.String The message."
  },
  "api/ioc/articles/intro.html": {
    "href": "api/ioc/articles/intro.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike IoC provides inversion of control and dependency injection abstractions and default implementations for the xPike paved-road. Packages XPike.IoC Abstractions used by the rest of xPike. Xpike.IoC.Owin Support for using xPike dependency injection in Owin applications. XPike.IoC.Microsoft An XPike.IoC provider implementation for Microsoft.Extensions.DependencyInjection. Xpike.IoC.SimpleInjector An XPike.IoC provider implementation for SimpleInjector."
  },
  "api/extensions/articles/intro.html": {
    "href": "api/extensions/articles/intro.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Extensions provides features enhancements to Microsoft.Extensions. Packages XPike.Extensions.DependencyInjection The XPike.Extensions.DependencyInjection package add functionality to Microsoft's DI container ( Microsoft.Extensions.DependencyInjection ). These extensions can be used independent of the xPike paved-road and take no dependencies on other xPike packages. XPike.Extensions.DependencyInjection.WebApi The XPike.Extensions.WebApi package provides support for using Microsoft.Extensions.DependencyInjection in legacy ASP.Net WebAPI applications."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | xPike",
    "keywords": "Add your introductions here!"
  },
  "api/ioc/api/index.html": {
    "href": "api/ioc/api/index.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike IoC provides inversion of control and dependency injection abstractions and default implementations for the xPike paved-road. Packages XPike.IoC Abstractions used by the rest of xPike. Xpike.IoC.Owin Support for using xPike dependency injection in Owin applications. XPike.IoC.Microsoft An XPike.IoC provider implementation for Microsoft.Extensions.DependencyInjection. Xpike.IoC.SimpleInjector An XPike.IoC provider implementation for SimpleInjector."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "xPike Guides and API Documentation | xPike",
    "keywords": "xPike Guides and API Documentation xPike Extensions xPike Extensions provides features enhancements to Microsoft.Extensions. These extensions can be used independent of the xPike paved-road and take no dependencies on other xPike packages. IoC - Dependency Injection Inversion of Control/Dependency Injection abstractions to support the rest of xPike."
  },
  "articles/license.html": {
    "href": "articles/license.html",
    "title": "License | xPike",
    "keywords": "License All xPike code and packages are licensed under the MIT license and are free to use in commercial production environments. MIT License Copyright (c) 2019, xPike committers Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "api/extensions/articles/verifying-the-container.html": {
    "href": "api/extensions/articles/verifying-the-container.html",
    "title": "Verifying the Container | xPike",
    "keywords": "Verifying the Container A common mistake we make is forgetting to register a type with the container. Another is having a singleton depend on a transient (or other lesser scoped) registration. xPike Extensions solves this by providing the cabability to verify your IServiceProvider instance at startup. This ensures that: All root objects and their dependencies can be resolved. Singletons only depend on other singletons. Scoped registrations only depend on singletons and other scoped registrations. Verifying the container configuration at startup can signifcantly reduce production issues caused by missing or improper registrations not identified during testing. Step 1 Install the XPike.Extensions.DependencyInjection package: dotnet add package XPike.Extensions.DependencyInjection or Install-Package XPike.Extensions.DependencyInjection Step 2 Call the extension method on IServiceCollection to add the verification functionality to the provider: using Xpike.Extensions.DependencyInjection; ... public void ConfigureServices(IServiceCollection services) { services.AddMvc(); ... services.AddServiceProviderVerification(); } Step 3 Call the extension method on IServiceProvider to add the verify the container: public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.ApplicationServices.Verify(); //this should be the first thing you do. ... app.UseMvc(); } Performance Considerations There is a performance hit at startup. The impact depends on the number of registrations. You may want to only verify the container in non-production environments. Assuming you have your ASPNETCORE_ENVIRONMENT set properly for each environment, you can simply... public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (!env.IsProduction()) app.ApplicationServices.Verify(); ... app.UseMvc(); }"
  },
  "api/extensions/articles/using-msid-in-webapi.html": {
    "href": "api/extensions/articles/using-msid-in-webapi.html",
    "title": "Using Microsoft.Extensions.DependencyInjection in Asp.Net WebAPI | xPike",
    "keywords": "Using Microsoft.Extensions.DependencyInjection in Asp.Net WebAPI Global.asax.cs public class WebApiApplication : System.Web.HttpApplication { protected void Application_Start() { GlobalConfiguration.Configure(WebApiConfig.Register); // Create a new service collection IServiceCollection services = new ServiceCollection(); // Add your services services.AddSingleton<ILogger, Logger>(); // Add the WebApi controllers to the collection services.AddApiControllers(); // Create and verify the service provider IServiceProvider provider = services.BuildServiceProvider(); provider.Verify(); // Tell WebAPI it use Microsoft.Extensions.DependencyInjection // to resolve dependencies GlobalConfiguration.Configuration.DependencyResolver = new MicrosoftDependencyResolver(provider); // Resolve and start any background services... ILogger logger = provider.GetService<ILogger>(); logger.LogInfo(\"Service Started\"); } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "xPike - The Paved-Road for Microservices in .Net | xPike",
    "keywords": "xPike - The Paved-Road for Microservices in .Net Mission Provide a paved road of cross-cutting concerns and best practices for building high quality, reliable, cloud-native microservices and distributed systems in .Net and .Net Core. Highlights Key goals are to provide a cross-cutting, cohesive framework which suggests a single paved road to success, without constraining you to follow that path. While we try not to be opinioned like other frameworks, we do provide sensible defaults. Highly pluggable and customizable, strongly encourages and enables test-oriented development. Primary feature set targeting \"universal areas of concern\" such as logging, metrics, settings management, dependency injection, data access, inter-service communication (events, queues, HTTP, gRPC), transient fault management (\"circuit breakers\"), etc. Providers are available for common RDBMS systems, cloud services in AWS and Azure, familiar .NET libraries, and many other use cases - it is also easy to create your own custom providers. Using a highly de-coupled architecture and a contract-based design pattern, it is well suited for an evolving service ecosystem and simplifies the decomposition of legacy systems. The \"Paved-Road\" The xPike SDK aims to provide a paved-road of industry demonstrated best practices in service design and operation, including: SOLID principles Observability Configuration separate from code Abstract infrastructure concerns from application logic Platform Support Natively support: .Net Core 2.0 and above .Net 4.5.2 and above Contributing Want to contribute? Read our contributing guidelines . Licensing License information can be found here ."
  },
  "api/extensions/api/index.html": {
    "href": "api/extensions/api/index.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Extensions provides features enhancements to Microsoft.Extensions. Packages XPike.Extensions.DependencyInjection The XPike.Extensions.DependencyInjection package add functionality to Microsoft's DI container ( Microsoft.Extensions.DependencyInjection ). These extensions can be used independent of the xPike paved-road and take no dependencies on other xPike packages. XPike.Extensions.DependencyInjection.WebApi The XPike.Extensions.WebApi package provides support for using Microsoft.Extensions.DependencyInjection in legacy ASP.Net WebAPI applications."
  },
  "articles/contributing.html": {
    "href": "articles/contributing.html",
    "title": "Contributing | xPike",
    "keywords": "Contributing The project maintainers maintain guidelines for contributing to the xPike repos. A team member will be happy to explain why a guideline is defined as it is. General contribution guidance is included in this document. Up for Grabs Project maintainers mark the most straightforward issues as \"up for grabs\". This set of issues is the place to start if you are interested in contributing but new to the codebase. Contribution \"Bar\" Project maintainers will merge changes that improve the product significantly and broadly and that align with the project mission. Maintainers will not merge changes that have narrowly-defined benefits, due to compatibility risk. Our goal is to keep they project broad and extensible, rather than specific and too opinionated. You are welcome to create your own project/library that extends xPike. If you are unsure, please open an issue and we will be happy to discuss. We may revert changes if they are found to be breaking. Contributions must also satisfy the other published guidelines defined in this document. DOs and DON'Ts Please do: DO follow our coding style (C# code-specific) DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines. DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. Changes without corresponding tests will be rejected. DO include documentation when adding new features. Changes without corresponding documentation will be rejected. DO keep the discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the discussion. DO blog and tweet (or whatever) about your contributions, frequently! Please do not: DON'T make PRs for style changes. DON'T surprise us with big pull requests. Instead, file an issue and start a discussion so we can agree on a direction before you invest a large amount of time. DON'T commit code that you didn't write. If you find code that you think is a good fit to add to xPike, file an issue and start a discussion before proceeding. DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it. DON'T add API additions without filing an issue and discussing with us first. Commit Messages Please format commit messages as follows (based on A Note About Git Commit Messages ): Summarize change in 50 characters or less Provide more detail after the first line. Leave one blank line below the summary and wrap all lines at 72 characters or less. If the change fixes an issue, leave another blank line after the final paragraph and indicate which issue is fixed in the specific format below. Fix #42 Do your best to factor commits appropriately, not too large with unrelated things in the same commit, and not too small with the same small change applied N times in N different commits. File Headers The following file header is the used for xPike. Please use it for new files. // This file is licensed under the MIT license. // See the LICENSE file in the project root for more information. Copying Files from Other Projects xPike uses some files from other projects, typically where a binary distribution does not exist or would be inconvenient. The following rules must be followed for PRs that include files from another project: The license of the file is permissive . Ideally, MIT. The license of the file is left in-tact. The contribution is correctly attributed in the 3rd party notices file in the repository, as needed. Porting Files from Other Projects There are many good algorithms implemented in other languages that would benefit the xPike project. The rules for porting a Java file to C# , for example, are the same as would be used for copying the same file, as described above. Clean-room implementations of existing algorithms that are not permissively licensed will generally not be accepted. If you want to create or nominate such an implementation, please create an issue to discuss the idea. C# Coding Style For non code files (xml, etc), our current best guidance is consistency. When editing files, keep new code and changes consistent with the style in the files. For new files, it should conform to the style for that component. If there is a completely new component, anything that is reasonably broadly accepted is fine. The general rule we follow is \"use Visual Studio defaults\". We use Allman style braces, where each brace begins on a new line. A single line statement block can go without braces but the block must be properly indented on its own line and must not be nested in other statement blocks that use braces. One exception is that a using statement is permitted to be nested within another using statement by starting on the following line at the same indentation level, even if the nested using contains a controlled block. We use four spaces of indentation (no tabs). We use camelCase for internal and private fields and use readonly where possible. Prefix internal and private static fields with _ . When used on static fields, readonly should come after static (e.g. static readonly not readonly static ). Public fields should be used sparingly and only if they are readonly . We use this. when necessary. We always specify the visibility, even if it's the default (e.g. private string foo not string foo ). This is to explicitly express intent. Visibility should be the first modifier (e.g. public abstract not abstract public ). Namespace imports should be specified at the top of the file, outside of namespace declarations, and should be sorted alphabetically, with the exception of System.* namespaces, which are to be placed on top of all others. Avoid more than one empty line at any time. For example, do not have two blank lines between members of a type. Avoid spurious free spaces. For example avoid if (someVar == 0)... , where the dots mark the spurious free spaces. Consider enabling \"View White Space (Ctrl+E, S)\" if using Visual Studio to aid detection. If a file happens to differ in style from these guidelines (e.g. private members are named m_member rather than member ), the existing style in that file takes precedence. We only use var when it's obvious what the variable type is (e.g. var stream = new FileStream(...) not var stream = OpenStandardInput() ). We use language keywords instead of BCL types (e.g. int, string, float instead of Int32, String, Single , etc) for both type references as well as method calls (e.g. int.Parse instead of Int32.Parse ). We use CAPITALIZED_SNAKE_CASING to name all our constant local variables and fields. The only exception is for interop code where the constant value should exactly match the name and value of the code you are calling via interop. We use nameof(...) instead of \"...\" whenever possible and relevant. Fields should be specified at the top within type declarations. When including non-ASCII characters in the source code use Unicode escape sequences (\\uXXXX) instead of literal characters. Literal non-ASCII characters occasionally get garbled by a tool or editor. All public members must have XML comments documentation. We use DocFX to generate the documentation, so you may use DocFX Markdown in the these comments. Undocumented public members will be rejected. An EditorConfig file ( .editorconfig ) has been provided at the root of the repository, enabling C# auto-formatting conforming to the above guidelines."
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.html",
    "title": "Namespace XPike.IoC.Microsoft.WebApi | xPike",
    "keywords": "Namespace XPike.IoC.Microsoft.WebApi Classes HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI."
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyProviderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyProviderExtensions.html",
    "title": "Class IDependencyProviderExtensions | xPike",
    "keywords": "Class IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.WebApi Assembly : XPike.IoC.Microsoft.WebApi.dll Syntax public static class IDependencyProviderExtensions Methods GetContainer(IDependencyProvider) Gets the underlying SimpleInjector container. Declaration public static IServiceProvider GetContainer(this IDependencyProvider dependencyProvider) Parameters Type Name Description IDependencyProvider dependencyProvider The dependency provider. Returns Type Description System.IServiceProvider Container."
  },
  "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyProvider.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyProvider.html",
    "title": "Class MicrosoftDependencyProvider | xPike",
    "keywords": "Class MicrosoftDependencyProvider Inheritance System.Object MicrosoftDependencyProvider Implements IDependencyProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft Assembly : XPike.IoC.Microsoft.dll Syntax public class MicrosoftDependencyProvider : IDependencyProvider Constructors MicrosoftDependencyProvider(IServiceProvider) Declaration public MicrosoftDependencyProvider(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Properties ServiceProvider Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider Methods BeginScope() Declaration public IDisposable BeginScope() Returns Type Description System.IDisposable ResolveDependencies<TService>() Declaration public IEnumerable<TService> ResolveDependencies<TService>() where TService : class Returns Type Description System.Collections.Generic.IEnumerable <TService> Type Parameters Name Description TService ResolveDependency(Type) Declaration public object ResolveDependency(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object ResolveDependency<TService>() Declaration public TService ResolveDependency<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService Verify() Verifies the dependency graph for completeness. Declaration public void Verify() Exceptions Type Condition DependencyVerificationException When verification fails. Implements IDependencyProvider Extension Methods IDependencyProviderExtensions.GetContainer(IDependencyProvider)"
  },
  "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyCollection.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyCollection.html",
    "title": "Class MicrosoftDependencyCollection | xPike",
    "keywords": "Class MicrosoftDependencyCollection Inheritance System.Object MicrosoftDependencyCollection Implements IDependencyCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft Assembly : XPike.IoC.Microsoft.dll Syntax public class MicrosoftDependencyCollection : IDependencyCollection Constructors MicrosoftDependencyCollection(IServiceCollection) Declaration public MicrosoftDependencyCollection(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection Properties ServiceCollection Declaration public IServiceCollection ServiceCollection { get; } Property Value Type Description IServiceCollection Methods AddSingletonToCollection(Type, Type) Declaration public void AddSingletonToCollection(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation AddSingletonToCollection<TService>(TService) Declaration public void AddSingletonToCollection<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService AddSingletonToCollection<TService, TImplementation>() Declaration public void AddSingletonToCollection<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService>) Declaration public void AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService> implementationFactory) where TService : class where TImplementation : class, TService Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService TImplementation BuildDependencyProvider(Boolean) Declaration public IDependencyProvider BuildDependencyProvider(bool verifyOnBuild = true) Parameters Type Name Description System.Boolean verifyOnBuild Returns Type Description IDependencyProvider RegisterScoped(Type, Type) Declaration public void RegisterScoped(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterScoped<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterScoped<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService RegisterScoped<TService, TImplementation>() Declaration public void RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation RegisterSingleton(Type, Type) Declaration public void RegisterSingleton(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterSingleton<TService>(TService) Declaration public void RegisterSingleton<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService RegisterSingleton<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterSingleton<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService RegisterSingleton<TService, TImplementation>() Declaration public void RegisterSingleton<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation RegisterSingletonFallback(Type, Type) Declaration public void RegisterSingletonFallback(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterTransient(Type, Type) Declaration public void RegisterTransient(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterTransient<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterTransient<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService RegisterTransient<TService, TImplementation>() Declaration public void RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation RemoveSingleton<TService, TImplementation>() Declaration public void RemoveSingleton<TService, TImplementation>() Type Parameters Name Description TService TImplementation ResetCollection<TService>() Declaration public void ResetCollection<TService>() Type Parameters Name Description TService Implements IDependencyCollection Extension Methods IDependencyCollectionExtensions.GetContainer(IDependencyCollection) IDependencyCollectionExtensions.Configure(IDependencyCollection, HttpConfiguration)"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyCollection.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyCollection.html",
    "title": "Class SimpleInjectorDependencyCollection | xPike",
    "keywords": "Class SimpleInjectorDependencyCollection Inheritance System.Object SimpleInjectorDependencyCollection Implements IDependencyCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.dll Syntax public class SimpleInjectorDependencyCollection : IDependencyCollection Constructors SimpleInjectorDependencyCollection() Declaration public SimpleInjectorDependencyCollection() Properties Container Gets the underlying SimpleInjector container instance. Declaration public Container Container { get; } Property Value Type Description Container The container. Methods AddSingletonToCollection(Type, Type) Declaration public void AddSingletonToCollection(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation AddSingletonToCollection<TService>(TService) Declaration public void AddSingletonToCollection<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService AddSingletonToCollection<TService, TImplementation>() Declaration public void AddSingletonToCollection<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService>) Declaration public void AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService> implementationFactory) where TService : class where TImplementation : class, TService Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService TImplementation BuildDependencyProvider(Boolean) Declaration public IDependencyProvider BuildDependencyProvider(bool verifyOnBuild = true) Parameters Type Name Description System.Boolean verifyOnBuild Returns Type Description IDependencyProvider RegisterScoped(Type, Type) Declaration public void RegisterScoped(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterScoped<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterScoped<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService RegisterScoped<TService, TImplementation>() Declaration public void RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation RegisterSingleton(Type, Type) Declaration public void RegisterSingleton(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterSingleton<TService>(TService) Declaration public void RegisterSingleton<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService RegisterSingleton<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterSingleton<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService RegisterSingleton<TService, TImplementation>() Declaration public void RegisterSingleton<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation RegisterSingletonFallback(Type, Type) Declaration public void RegisterSingletonFallback(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterTransient(Type, Type) Declaration public void RegisterTransient(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation RegisterTransient<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterTransient<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService RegisterTransient<TService, TImplementation>() Declaration public void RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation ResetCollection<TService>() Declaration public void ResetCollection<TService>() Type Parameters Name Description TService Implements IDependencyCollection Extension Methods IDependencyCollectionExtensions.GetContainer(IDependencyCollection) IDependencyCollectionExtensions.Configure(IDependencyCollection, HttpConfiguration)"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyProviderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyProviderExtensions.html",
    "title": "Class IDependencyProviderExtensions | xPike",
    "keywords": "Class IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.WebAPI.dll Syntax public static class IDependencyProviderExtensions Methods GetContainer(IDependencyProvider) Gets the underlying SimpleInjector container. Declaration public static Container GetContainer(this IDependencyProvider dependencyProvider) Parameters Type Name Description IDependencyProvider dependencyProvider The dependency provider. Returns Type Description Container Container."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.WebAPI.dll Syntax public static class IDependencyCollectionExtensions Methods Configure(IDependencyCollection, HttpConfiguration) Configures the underlying SimpleInjector container for use with ASP.Net WebAPI. Declaration public static IDependencyCollection Configure(this IDependencyCollection dependencyCollection, HttpConfiguration httpConfiguration) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. HttpConfiguration httpConfiguration The HTTP configuration. Returns Type Description IDependencyCollection IDependencyCollection. GetContainer(IDependencyCollection) Gets the underlying SimpleInjector container. Declaration public static Container GetContainer(this IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. Returns Type Description Container Container"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IServiceCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike dependency injection abscrations. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector.AspNetCore Assembly : XPike.IoC.SimpleInjector.AspNetCore.dll Syntax public static class IServiceCollectionExtensions Methods AddXPikeDependencyInjection(IServiceCollection, Action<SimpleInjectorAddOptions>) Adds the SimpleInjector implementation of XPike dependency injection. Declaration public static IDependencyCollection AddXPikeDependencyInjection(this IServiceCollection services, Action<SimpleInjectorAddOptions> options = null) Parameters Type Name Description IServiceCollection services This instance of IServiceCollection. System.Action < SimpleInjectorAddOptions > options SimpleInjector options. If omitted, configures SimpleInjector for AspNetCore and controller activation. Returns Type Description IDependencyCollection An insance of . Remarks See https://simpleinjector.readthedocs.io/en/latest/aspnetintegration.html"
  },
  "api/ioc/api/XPike.IoC.Microsoft.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.html",
    "title": "Namespace XPike.IoC.Microsoft | xPike",
    "keywords": "Namespace XPike.IoC.Microsoft Classes MicrosoftDependencyCollection MicrosoftDependencyProvider"
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.WebApi Assembly : XPike.IoC.Microsoft.WebApi.dll Syntax public static class IDependencyCollectionExtensions Methods Configure(IDependencyCollection, HttpConfiguration) Configures the underlying SimpleInjector container for use with ASP.Net WebAPI. Declaration public static IDependencyCollection Configure(this IDependencyCollection dependencyCollection, HttpConfiguration httpConfiguration) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. HttpConfiguration httpConfiguration The HTTP configuration. Returns Type Description IDependencyCollection IDependencyCollection. GetContainer(IDependencyCollection) Gets the underlying SimpleInjector container. Declaration public static IServiceCollection GetContainer(this IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. Returns Type Description IServiceCollection Container"
  }
}