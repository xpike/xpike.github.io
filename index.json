{
  "api/configuration/api/XPike.Configuration.Microsoft.MicrosoftConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.MicrosoftConfigurationProvider.html",
    "title": "Class MicrosoftConfigurationProvider | xPike",
    "keywords": "Class MicrosoftConfigurationProvider Provides configuration values to XPike by delegating lookups to the Microsoft.Extensions.Configuration.IConfiguration service. Inheritance System.Object ConfigurationProviderBase MicrosoftConfigurationProvider Implements IMicrosoftConfigurationProvider IConfigurationProvider Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Microsoft Assembly : XPike.Configuration.Microsoft.dll Syntax public class MicrosoftConfigurationProvider : ConfigurationProviderBase, IMicrosoftConfigurationProvider, IConfigurationProvider Constructors | Improve this Doc View Source MicrosoftConfigurationProvider(IConfiguration) Declaration public MicrosoftConfigurationProvider(IConfiguration configuration) Parameters Type Name Description IConfiguration configuration Methods | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) Implements IMicrosoftConfigurationProvider IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.XPikeConfigurationSource.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.XPikeConfigurationSource.html",
    "title": "Class XPikeConfigurationSource | xPike",
    "keywords": "Class XPikeConfigurationSource Inheritance System.Object XPikeConfigurationSource Implements IXPikeConfigurationSource IConfigurationSource Microsoft.Extensions.Configuration.IConfigurationProvider Namespace : XPike.Configuration.Microsoft.AspNetCore Assembly : XPike.Configuration.Microsoft.AspNetCore.dll Syntax public class XPikeConfigurationSource : ConfigurationProvider, IXPikeConfigurationSource, IConfigurationSource, Extensions.Configuration.IConfigurationProvider Constructors | Improve this Doc View Source XPikeConfigurationSource(IConfigurationService) Declaration public XPikeConfigurationSource(IConfigurationService configService) Parameters Type Name Description IConfigurationService configService Methods | Improve this Doc View Source Build(IConfigurationBuilder) Declaration public Extensions.Configuration.IConfigurationProvider Build(IConfigurationBuilder builder) Parameters Type Name Description IConfigurationBuilder builder Returns Type Description Microsoft.Extensions.Configuration.IConfigurationProvider | Improve this Doc View Source Load() Declaration public override void Load() Implements IXPikeConfigurationSource IConfigurationSource Microsoft.Extensions.Configuration.IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.Package.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package XPike Configuration - Configuration Source for Microsoft.Extensions.Configuration NOTE: Loading this package should not be necessary. It's here merely for consistency. Package Dependencies: XPike.Configuration Singleton Registrations: IXPikeConfigurationSource => XPikeConfigurationSource Inheritance System.Object Package Namespace : XPike.Configuration.Microsoft.AspNetCore Assembly : XPike.Configuration.Microsoft.AspNetCore.dll Syntax public class Package : IDependencyPackage Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection container) Parameters Type Name Description IDependencyCollection container"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IServiceCollectionExtensions.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Microsoft.AspNetCore Assembly : XPike.Configuration.Microsoft.AspNetCore.dll Syntax public static class IServiceCollectionExtensions Methods | Improve this Doc View Source UseMicrosoftConfigurationForXPike(IServiceCollection) Configures XPike Configuration to retrieve its values from Microsoft.Extensions.Configuration.IConfiguration. Declaration public static void UseMicrosoftConfigurationForXPike(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "api/configuration/api/XPike.Configuration.IXPikeConfigBuilder.html": {
    "href": "api/configuration/api/XPike.Configuration.IXPikeConfigBuilder.html",
    "title": "Interface IXPikeConfigBuilder | xPike",
    "keywords": "Interface IXPikeConfigBuilder Orchestrates the construction of an XPike Configuration Service. Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IXPikeConfigBuilder Properties | Improve this Doc View Source ConfigurationService Gets the Configuration Service once it has been built. Calling this before Build() will throw an exception. Declaration IConfigurationService ConfigurationService { get; } Property Value Type Description IConfigurationService Methods | Improve this Doc View Source AddProvider(IConfigurationProvider) Adds a Configuration Provider to the mappings. These will be used to construct the Configuration Service. Calling this after Build() will throw an exception. Declaration IXPikeConfigBuilder AddProvider(IConfigurationProvider instance) Parameters Type Name Description IConfigurationProvider instance Returns Type Description IXPikeConfigBuilder | Improve this Doc View Source Build() Constructs and returns the Configuration Service using the registered Configuration Providers. Calling this more than once will throw an exception. Declaration IConfigurationService Build() Returns Type Description IConfigurationService | Improve this Doc View Source ClearProviders() Clears the list of registered Configuration Providers. Calling this after Build() will throw an exception. Declaration IXPikeConfigBuilder ClearProviders() Returns Type Description IXPikeConfigBuilder"
  },
  "api/configuration/api/XPike.Configuration.IConfigurationService.html": {
    "href": "api/configuration/api/XPike.Configuration.IConfigurationService.html",
    "title": "Interface IConfigurationService | xPike",
    "keywords": "Interface IConfigurationService Represents a Configuration Service, which is the \"end-user-facing consumable\" from this Package. This is what you should use to retrieve configuration values in most cases. The Configuration Service is also expected to aggregate a Bulk Load of values from Providers that support it. This parallels (and is inter-operable with) the IConfiguration service in ASP.NET Core. See the XPike.Configuration.Microsoft.AspNetCore package for details. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) IConfigurationLoader.Load() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IConfigurationService : IConfigurationProvider, IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.ConfigurationProviderBase.html": {
    "href": "api/configuration/api/XPike.Configuration.ConfigurationProviderBase.html",
    "title": "Class ConfigurationProviderBase | xPike",
    "keywords": "Class ConfigurationProviderBase Abstract implementation of a Configuration Provider, to simplify the creation of new Providers. In particular, adds proper exceptions when requesting \"required\" values using GetValue(), as well as intrinsic datatype conversion and JSON deserialization support. To create a new Provider, simply override this class and implement the GetValueOrDefault() method. Inheritance System.Object ConfigurationProviderBase AWSConfigurationProvider AzureConfigurationProvider EnvironmentConfigurationProvider MemoryConfigurationProvider MicrosoftConfigurationProvider NullConfigurationProvider SystemConfigurationProvider Implements IConfigurationProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public abstract class ConfigurationProviderBase : IConfigurationProvider Methods | Improve this Doc View Source GetValue(String) Declaration public virtual string GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetValue<T>(String) Declaration public virtual T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public abstract string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String | Improve this Doc View Source GetValueOrDefault<T>(String, T) Declaration public virtual T GetValueOrDefault<T>(string key, T defaultValue = null) Parameters Type Name Description System.String key T defaultValue Returns Type Description T Type Parameters Name Description T Implements IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.ConfigManager-1.html": {
    "href": "api/configuration/api/XPike.Configuration.ConfigManager-1.html",
    "title": "Class ConfigManager<TConfig> | xPike",
    "keywords": "Class ConfigManager<TConfig> Inheritance System.Object ConfigManager<TConfig> DefaultConfigManager<TConfig> Implements IConfigManager <TConfig> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class ConfigManager<TConfig> : IConfigManager<TConfig> where TConfig : class Type Parameters Name Description TConfig Constructors | Improve this Doc View Source ConfigManager(IConfigurationService) Declaration public ConfigManager(IConfigurationService configService) Parameters Type Name Description IConfigurationService configService | Improve this Doc View Source ConfigManager(IConfigurationService, Action<TConfig>) Declaration public ConfigManager(IConfigurationService configService, Action<TConfig> postConfigureAction) Parameters Type Name Description IConfigurationService configService System.Action <TConfig> postConfigureAction | Improve this Doc View Source ConfigManager(IConfigurationService, String) Declaration public ConfigManager(IConfigurationService configService, string configKey) Parameters Type Name Description IConfigurationService configService System.String configKey | Improve this Doc View Source ConfigManager(IConfigurationService, String, Action<TConfig>) Declaration public ConfigManager(IConfigurationService configService, string configKey, Action<TConfig> postConfigureAction) Parameters Type Name Description IConfigurationService configService System.String configKey System.Action <TConfig> postConfigureAction Fields | Improve this Doc View Source _configService Declaration protected readonly IConfigurationService _configService Field Value Type Description IConfigurationService | Improve this Doc View Source _postConfigureAction Declaration protected readonly Action<TConfig> _postConfigureAction Field Value Type Description System.Action <TConfig> Properties | Improve this Doc View Source ConfigurationKey Declaration protected virtual string ConfigurationKey { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetConfig() Declaration public virtual IConfig<TConfig> GetConfig() Returns Type Description IConfig <TConfig> | Improve this Doc View Source GetConfigOrDefault(TConfig) Declaration public virtual IConfig<TConfig> GetConfigOrDefault(TConfig defaultValue) Parameters Type Name Description TConfig defaultValue Returns Type Description IConfig <TConfig> | Improve this Doc View Source GetValue() Declaration public virtual TConfig GetValue() Returns Type Description TConfig | Improve this Doc View Source GetValue(String) Declaration protected string GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetValue<T>(String) Declaration protected virtual T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault(String, String) Declaration protected string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String | Improve this Doc View Source GetValueOrDefault<T>(String, T) Declaration protected virtual T GetValueOrDefault<T>(string key, T defaultValue = null) Parameters Type Name Description System.String key T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source PostConfigure(TConfig) Declaration public virtual TConfig PostConfigure(TConfig settings) Parameters Type Name Description TConfig settings Returns Type Description TConfig Implements IConfigManager<TConfig>"
  },
  "api/configuration/api/XPike.Configuration.Azure.IAzureConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Azure.IAzureConfigurationProvider.html",
    "title": "Interface IAzureConfigurationProvider | xPike",
    "keywords": "Interface IAzureConfigurationProvider Represents a Configuration Provider that retrieves its settings from the Azure App Configuration Service. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) Namespace : XPike.Configuration.Azure Assembly : XPike.Configuration.Azure.dll Syntax public interface IAzureConfigurationProvider : IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.AWS.html": {
    "href": "api/configuration/api/XPike.Configuration.AWS.html",
    "title": "Namespace XPike.Configuration.AWS | xPike",
    "keywords": "Namespace XPike.Configuration.AWS Classes AWSConfigurationProvider Retrieves Configuration values from the Azure App Configuration Service. This is done using the cross-platform-compatible Azure Client SDK. This implementation does not provide any of the advanced feature set such as Configuration Builders, that the ASP.NET Core and .NET Framework variants offer. Since this constructor requires a Connection String to be passed in, it must be registered using: container.AddSingleton<IConfigurationProvider>(new AzureConfigurationProvider(connectionString)); Package Interfaces IAWSConfigurationProvider Represents a Configuration Provider that retrieves its settings from the AWS SSM Simple Parameter Service."
  },
  "api/configuration/api/XPike.Configuration.AWS.IAWSConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.AWS.IAWSConfigurationProvider.html",
    "title": "Interface IAWSConfigurationProvider | xPike",
    "keywords": "Interface IAWSConfigurationProvider Represents a Configuration Provider that retrieves its settings from the AWS SSM Simple Parameter Service. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) Namespace : XPike.Configuration.AWS Assembly : XPike.Configuration.AWS.dll Syntax public interface IAWSConfigurationProvider : IConfigurationProvider"
  },
  "api/settings/api/XPike.Settings.html": {
    "href": "api/settings/api/XPike.Settings.html",
    "title": "Namespace XPike.Settings | xPike",
    "keywords": "Namespace XPike.Settings Classes DefaultSettingsManager<TSettings> Package SettingsManager<TSettings> The default implementation of an ISettingsManager which uses the ISettingsService to retrieve values. Can also be instantiated using several constructor overloads to customize the configuration key and post-load actions. Interfaces ISettings<TSettings> Defines an instance of strongly-typed and managed application-oriented settings. ISettingsManager<TSettings> ISettingsService Defines a Settings Service, which is the user-facting consumable which acts as a sort of orchestrator to allow retrieval of Settings from multiple Providers. This shares a signature with IConfigurationService, as wel as adding two variants of GetSettings()."
  },
  "api/settings/api/XPike.Settings.SettingsManager-1.html": {
    "href": "api/settings/api/XPike.Settings.SettingsManager-1.html",
    "title": "Class SettingsManager<TSettings> | xPike",
    "keywords": "Class SettingsManager<TSettings> The default implementation of an ISettingsManager which uses the ISettingsService to retrieve values. Can also be instantiated using several constructor overloads to customize the configuration key and post-load actions. Inheritance System.Object SettingsManager<TSettings> DefaultSettingsManager<TSettings> Implements ISettingsManager <TSettings> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Settings Assembly : XPike.Settings.dll Syntax public class SettingsManager<TSettings> : ISettingsManager<TSettings> where TSettings : class Type Parameters Name Description TSettings Constructors | Improve this Doc View Source SettingsManager(ISettingsService) Declaration public SettingsManager(ISettingsService settingsService) Parameters Type Name Description ISettingsService settingsService | Improve this Doc View Source SettingsManager(ISettingsService, Action<TSettings>) Declaration public SettingsManager(ISettingsService settingsService, Action<TSettings> postConfigureAction) Parameters Type Name Description ISettingsService settingsService System.Action <TSettings> postConfigureAction | Improve this Doc View Source SettingsManager(ISettingsService, String) Declaration public SettingsManager(ISettingsService settingsService, string configKey) Parameters Type Name Description ISettingsService settingsService System.String configKey | Improve this Doc View Source SettingsManager(ISettingsService, String, Action<TSettings>) Declaration public SettingsManager(ISettingsService settingsService, string configKey, Action<TSettings> postConfigureAction) Parameters Type Name Description ISettingsService settingsService System.String configKey System.Action <TSettings> postConfigureAction Fields | Improve this Doc View Source _postConfigureAction Declaration protected readonly Action<TSettings> _postConfigureAction Field Value Type Description System.Action <TSettings> | Improve this Doc View Source _settingsService Declaration protected readonly ISettingsService _settingsService Field Value Type Description ISettingsService Properties | Improve this Doc View Source ConfigurationKey Declaration protected virtual string ConfigurationKey { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetSettings() Declaration public virtual ISettings<TSettings> GetSettings() Returns Type Description ISettings <TSettings> | Improve this Doc View Source GetSettingsOrDefault(TSettings) Declaration public virtual ISettings<TSettings> GetSettingsOrDefault(TSettings defaultValue) Parameters Type Name Description TSettings defaultValue Returns Type Description ISettings <TSettings> | Improve this Doc View Source GetValue() Declaration public virtual TSettings GetValue() Returns Type Description TSettings | Improve this Doc View Source GetValue(String) Declaration protected string GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetValue<T>(String) Declaration protected virtual T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault(String, String) Declaration protected string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String | Improve this Doc View Source GetValueOrDefault<T>(String, T) Declaration protected virtual T GetValueOrDefault<T>(string key, T defaultValue = null) Parameters Type Name Description System.String key T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source PostConfigureSettings(TSettings) Declaration public virtual TSettings PostConfigureSettings(TSettings settings) Parameters Type Name Description TSettings settings Returns Type Description TSettings | Improve this Doc View Source PostConfigureSettings(ISettings<TSettings>) Declaration public virtual TSettings PostConfigureSettings(ISettings<TSettings> settings) Parameters Type Name Description ISettings <TSettings> settings Returns Type Description TSettings Implements ISettingsManager<TSettings>"
  },
  "api/settings/api/XPike.Settings.Providers.html": {
    "href": "api/settings/api/XPike.Settings.Providers.html",
    "title": "Namespace XPike.Settings.Providers | xPike",
    "keywords": "Namespace XPike.Settings.Providers Interfaces ISettingsProvider Defines an XPike Settings Provider, which shares a signature with the Configuration Service by implementing the same IConfigurationProvider and IConfigurationLoader interfaces."
  },
  "api/settings/api/XPike.Settings.ISettingsService.html": {
    "href": "api/settings/api/XPike.Settings.ISettingsService.html",
    "title": "Interface ISettingsService | xPike",
    "keywords": "Interface ISettingsService Defines a Settings Service, which is the user-facting consumable which acts as a sort of orchestrator to allow retrieval of Settings from multiple Providers. This shares a signature with IConfigurationService, as wel as adding two variants of GetSettings(). Namespace : XPike.Settings Assembly : XPike.Settings.dll Syntax public interface ISettingsService : IConfigurationService Methods | Improve this Doc View Source GetSettings<TSettings>(String) Retrieves a Settings object wrapped in an ISettings interface to provide some basic metadata. If the requested key can't be found, an InvalidConfigurationException will be thrown. Declaration ISettings<TSettings> GetSettings<TSettings>(string key) where TSettings : class Parameters Type Name Description System.String key Returns Type Description ISettings <TSettings> Type Parameters Name Description TSettings | Improve this Doc View Source GetSettingsOrDefault<TSettings>(String, TSettings) Retrieves a Settings object wrapped in an ISettings interface to provide some basic metadata. If the requested key can't be found, the specified defaultValue will be returned instead. Declaration ISettings<TSettings> GetSettingsOrDefault<TSettings>(string key, TSettings defaultValue = null) where TSettings : class Parameters Type Name Description System.String key TSettings defaultValue Returns Type Description ISettings <TSettings> Type Parameters Name Description TSettings"
  },
  "api/settings/api/XPike.Settings.ISettingsManager-1.html": {
    "href": "api/settings/api/XPike.Settings.ISettingsManager-1.html",
    "title": "Interface ISettingsManager<TSettings> | xPike",
    "keywords": "Interface ISettingsManager<TSettings> Namespace : XPike.Settings Assembly : XPike.Settings.dll Syntax public interface ISettingsManager<TSettings> where TSettings : class Type Parameters Name Description TSettings Methods | Improve this Doc View Source GetSettings() Retrieves the settings, wrapped in an ISettings interface to provide some metadata. Declaration ISettings<TSettings> GetSettings() Returns Type Description ISettings <TSettings> | Improve this Doc View Source GetSettingsOrDefault(TSettings) Retrieves the settings, wrapped in an ISettings interface to provide some metadata. Declaration ISettings<TSettings> GetSettingsOrDefault(TSettings defaultValue) Parameters Type Name Description TSettings defaultValue Returns Type Description ISettings <TSettings> | Improve this Doc View Source GetValue() Retrieves just the settings object itself without a wrapper. Declaration TSettings GetValue() Returns Type Description TSettings"
  },
  "api/settings/api/XPike.Settings.ISettings-1.html": {
    "href": "api/settings/api/XPike.Settings.ISettings-1.html",
    "title": "Interface ISettings<TSettings> | xPike",
    "keywords": "Interface ISettings<TSettings> Defines an instance of strongly-typed and managed application-oriented settings. Namespace : XPike.Settings Assembly : XPike.Settings.dll Syntax public interface ISettings<TSettings> where TSettings : class Type Parameters Name Description TSettings Properties | Improve this Doc View Source ConfigurationKey The Configuration Key which these settings were retrieved from. Declaration string ConfigurationKey { get; } Property Value Type Description System.String | Improve this Doc View Source LastRetrievedUtc The timestamp of when this value was last refreshed. Declaration DateTime LastRetrievedUtc { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Value The actual Settings object that was retrieved. Declaration TSettings Value { get; } Property Value Type Description TSettings"
  },
  "api/settings/api/XPike.Settings.DefaultSettingsManager-1.html": {
    "href": "api/settings/api/XPike.Settings.DefaultSettingsManager-1.html",
    "title": "Class DefaultSettingsManager<TSettings> | xPike",
    "keywords": "Class DefaultSettingsManager<TSettings> Inheritance System.Object SettingsManager <TSettings> DefaultSettingsManager<TSettings> Implements ISettingsManager <TSettings> Inherited Members SettingsManager<TSettings>._settingsService SettingsManager<TSettings>._postConfigureAction SettingsManager<TSettings>.ConfigurationKey SettingsManager<TSettings>.PostConfigureSettings(TSettings) SettingsManager<TSettings>.PostConfigureSettings(ISettings<TSettings>) SettingsManager<TSettings>.GetSettings() SettingsManager<TSettings>.GetSettingsOrDefault(TSettings) SettingsManager<TSettings>.GetValue() SettingsManager<TSettings>.GetValueOrDefault<T>(String, T) SettingsManager<TSettings>.GetValue<T>(String) SettingsManager<TSettings>.GetValue(String) SettingsManager<TSettings>.GetValueOrDefault(String, String) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Settings Assembly : XPike.Settings.dll Syntax public class DefaultSettingsManager<TSettings> : SettingsManager<TSettings>, ISettingsManager<TSettings> where TSettings : class Type Parameters Name Description TSettings Constructors | Improve this Doc View Source DefaultSettingsManager(ISettingsService) Declaration public DefaultSettingsManager(ISettingsService settingsService) Parameters Type Name Description ISettingsService settingsService Implements ISettingsManager<TSettings>"
  },
  "api/settings/api/XPike.Settings.Basic.html": {
    "href": "api/settings/api/XPike.Settings.Basic.html",
    "title": "Namespace XPike.Settings.Basic | xPike",
    "keywords": "Namespace XPike.Settings.Basic Classes Settings<TSettings> The default implementation of ISettings, which simply wraps a Settings object while also tracking its Configuration Key and Last Retrieved Timestamp in UTC. SettingsService The default implementation of ISettingsService which retrieves its values from the DI-registered collection of ISettingsProvider instances. This shares a common base class with Configuration Service, and only really differs where necessary (a different object type held in the collection, and a few overloads specific to the concept of loading strongly-typed settings allowing simple customization."
  },
  "api/settings/api/XPike.Settings.Basic.SettingsService.html": {
    "href": "api/settings/api/XPike.Settings.Basic.SettingsService.html",
    "title": "Class SettingsService | xPike",
    "keywords": "Class SettingsService The default implementation of ISettingsService which retrieves its values from the DI-registered collection of ISettingsProvider instances. This shares a common base class with Configuration Service, and only really differs where necessary (a different object type held in the collection, and a few overloads specific to the concept of loading strongly-typed settings allowing simple customization. Inheritance System.Object SettingsService Implements ISettingsService IConfigurationService Namespace : XPike.Settings.Basic Assembly : XPike.Settings.dll Syntax public class SettingsService : ConfigurationServiceBase<ISettingsProvider>, ISettingsService, IConfigurationService Constructors | Improve this Doc View Source SettingsService(IEnumerable<ISettingsProvider>) Declaration public SettingsService(IEnumerable<ISettingsProvider> providers) Parameters Type Name Description System.Collections.Generic.IEnumerable < ISettingsProvider > providers Methods | Improve this Doc View Source GetSettings<TSettings>(String) Declaration public virtual ISettings<TSettings> GetSettings<TSettings>(string key) where TSettings : class Parameters Type Name Description System.String key Returns Type Description ISettings <TSettings> Type Parameters Name Description TSettings | Improve this Doc View Source GetSettingsOrDefault<TSettings>(String, TSettings) Declaration public virtual ISettings<TSettings> GetSettingsOrDefault<TSettings>(string key, TSettings defaultValue = null) where TSettings : class Parameters Type Name Description System.String key TSettings defaultValue Returns Type Description ISettings <TSettings> Type Parameters Name Description TSettings | Improve this Doc View Source WrapSettings<TSettings>(String, TSettings) Declaration public virtual ISettings<TSettings> WrapSettings<TSettings>(string key, TSettings settings) where TSettings : class Parameters Type Name Description System.String key TSettings settings Returns Type Description ISettings <TSettings> Type Parameters Name Description TSettings Implements ISettingsService IConfigurationService"
  },
  "api/settings/api/XPike.Settings.Basic.Settings-1.html": {
    "href": "api/settings/api/XPike.Settings.Basic.Settings-1.html",
    "title": "Class Settings<TSettings> | xPike",
    "keywords": "Class Settings<TSettings> The default implementation of ISettings, which simply wraps a Settings object while also tracking its Configuration Key and Last Retrieved Timestamp in UTC. Inheritance System.Object Settings<TSettings> Implements ISettings <TSettings> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Settings.Basic Assembly : XPike.Settings.dll Syntax public class Settings<TSettings> : ISettings<TSettings> where TSettings : class Type Parameters Name Description TSettings Constructors | Improve this Doc View Source Settings(String, TSettings) Declaration public Settings(string configKey, TSettings settings) Parameters Type Name Description System.String configKey TSettings settings Properties | Improve this Doc View Source ConfigurationKey Declaration public string ConfigurationKey { get; } Property Value Type Description System.String | Improve this Doc View Source LastRetrievedUtc Declaration public DateTime LastRetrievedUtc { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Value Declaration public TSettings Value { get; } Property Value Type Description TSettings Implements ISettings<TSettings>"
  },
  "api/settings/api/XPike.Settings.AspNetCore.html": {
    "href": "api/settings/api/XPike.Settings.AspNetCore.html",
    "title": "Namespace XPike.Settings.AspNetCore | xPike",
    "keywords": "Namespace XPike.Settings.AspNetCore Classes IServiceCollectionExtensions Extension methods for IServiceCollection which allows XPike Settings to be used to provide values for the Microsoft.Extensions.Options.IOptions pattern."
  },
  "api/settings/api/XPike.Settings.AspNetCore.IServiceCollectionExtensions.html": {
    "href": "api/settings/api/XPike.Settings.AspNetCore.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection which allows XPike Settings to be used to provide values for the Microsoft.Extensions.Options.IOptions pattern. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Settings.AspNetCore Assembly : XPike.Settings.AspNetCore.dll Syntax public static class IServiceCollectionExtensions Methods | Improve this Doc View Source AddXPikeSettings(IServiceCollection) Registers the XPike Settings System with the DI container so that ISettings is mapp. At some later point, we may provide a direct integration with Microsoft's IOptions. For now, this is possible at a lower level through XPike.Configuration's integration with Microsoft's IConfiguration. Custom configuration for specific ISettings types is provided from other extension methods in this namespace. Declaration public static IServiceCollection AddXPikeSettings(this IServiceCollection services) Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection | Improve this Doc View Source ConfigureXPikeSettings<TSettings>(IServiceCollection, Action<TSettings>) Coonfigures XPike Settings to retrieve Settngs of TSettings from the default configuration key. and allowing you to specify an action which will occur after the value is loaded to perform some additional post-processing before the settings are returned to the caller. Declaration public static IServiceCollection ConfigureXPikeSettings<TSettings>(this IServiceCollection services, Action<TSettings> postConfigureAction) where TSettings : class Parameters Type Name Description IServiceCollection services System.Action <TSettings> postConfigureAction Returns Type Description IServiceCollection Type Parameters Name Description TSettings | Improve this Doc View Source ConfigureXPikeSettings<TSettings>(IServiceCollection, String) Coonfigures XPike Settings to use the specified key to retrieve Settngs of TSettings. Declaration public static IServiceCollection ConfigureXPikeSettings<TSettings>(this IServiceCollection services, string key) where TSettings : class Parameters Type Name Description IServiceCollection services System.String key Returns Type Description IServiceCollection Type Parameters Name Description TSettings | Improve this Doc View Source ConfigureXPikeSettings<TSettings>(IServiceCollection, String, Action<TSettings>) Coonfigures XPike Settings to use the specified key to retrieve Settngs of TSettings, and allowing you to specify an action which will occur after the value is loaded to perform some additional post-processing before the settings are returned to the caller. Declaration public static IServiceCollection ConfigureXPikeSettings<TSettings>(this IServiceCollection services, string key, Action<TSettings> postConfigureAction) where TSettings : class Parameters Type Name Description IServiceCollection services System.String key System.Action <TSettings> postConfigureAction Returns Type Description IServiceCollection Type Parameters Name Description TSettings | Improve this Doc View Source ConfigureXPikeSettings<TSettings, TManager>(IServiceCollection) Configures XPike Settings to retrieve Settings of TSettings using the specified Settings Manager. Declaration public static IServiceCollection ConfigureXPikeSettings<TSettings, TManager>(this IServiceCollection services) where TSettings : class where TManager : ISettingsManager<TSettings> Parameters Type Name Description IServiceCollection services Returns Type Description IServiceCollection Type Parameters Name Description TSettings TManager"
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.Owin.DependencyInjectionMiddleware.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.Owin.DependencyInjectionMiddleware.html",
    "title": "Class DependencyInjectionMiddleware | xPike",
    "keywords": "Class DependencyInjectionMiddleware Supports using Microsoft.Extensions.DependencyInjection in the Owin middleware pipeline. Implements the This should be the first middleware in the pipeline. Inheritance System.Object DependencyInjectionMiddleware Namespace : XPike.Extensions.DependencyInjection.Owin Assembly : XPike.Extensions.DependencyInjection.Owin.dll Syntax public class DependencyInjectionMiddleware : OwinMiddleware Constructors | Improve this Doc View Source DependencyInjectionMiddleware(OwinMiddleware, IServiceProvider) Initializes a new instance of the DependencyInjectionMiddleware class. Declaration public DependencyInjectionMiddleware(OwinMiddleware next, IServiceProvider provider) Parameters Type Name Description OwinMiddleware next The next. System.IServiceProvider provider The provider. Methods | Improve this Doc View Source Invoke(IOwinContext) Process an individual request. Declaration public override Task Invoke(IOwinContext context) Parameters Type Name Description IOwinContext context The context. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.IServiceProviderExtensions.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.IServiceProviderExtensions.html",
    "title": "Class IServiceProviderExtensions | xPike",
    "keywords": "Class IServiceProviderExtensions Extension methods for IServiceProvider, to enhance the features and functionality of Microsoft.Extensions.DependencyInjection. Inheritance System.Object IServiceProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public static class IServiceProviderExtensions Methods | Improve this Doc View Source Verify(IServiceProvider) Verifies the dependency graph for completeness and valid dependency lifetimes. This method is thread-safe. Declaration public static void Verify(this IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider This IServiceProvider instance. Remarks This method also ensures that singletons only depend on other singletons and that scoped objects only depend on singletons and other scoped objects. Having a singleton depend on a transient object effectively makes that transient object a singleton and could result in undesired behavior. Examples public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.ApplicationServices.Verify(); ... app.UseMvc(); } Exceptions Type Condition System.InvalidOperationException The container has already been verified. System.InvalidOperationException IServiceCollection must be registerd in order to verify the provider. Verify() needs to obtain the list of registered services from the IServiceCollection instance. ServiceProviderVerificationException The container is invalid."
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.IServiceCollectionExtensions.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public static class IServiceCollectionExtensions Methods | Improve this Doc View Source AddServiceProviderVerification(IServiceCollection) Configures the service collection so it can later be verfied by the service provider. Declaration public static IServiceCollection AddServiceProviderVerification(this IServiceCollection services) Parameters Type Name Description IServiceCollection services This IServicesCollection instance. Returns Type Description IServiceCollection IServiceCollection."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.WebAPI.dll Syntax public static class IDependencyCollectionExtensions Methods | Improve this Doc View Source Configure(IDependencyCollection, HttpConfiguration) Configures the underlying SimpleInjector container for use with ASP.Net WebAPI. Declaration public static IDependencyCollection Configure(this IDependencyCollection dependencyCollection, HttpConfiguration httpConfiguration) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. HttpConfiguration httpConfiguration The HTTP configuration. Returns Type Description IDependencyCollection IDependencyCollection. | Improve this Doc View Source GetContainer(IDependencyCollection) Gets the underlying SimpleInjector container. Declaration public static Container GetContainer(this IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. Returns Type Description Container Container"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.HttpConfigurationExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.HttpConfigurationExtensions.html",
    "title": "Class HttpConfigurationExtensions | xPike",
    "keywords": "Class HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object HttpConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.WebAPI.dll Syntax public static class HttpConfigurationExtensions Methods | Improve this Doc View Source UseXPikeDependencyInjection(HttpConfiguration, IDependencyProvider) Uses the xPike dependency injection for resolving dependencies. Declaration public static HttpConfiguration UseXPikeDependencyInjection(this HttpConfiguration config, IDependencyProvider dependencyProvider) Parameters Type Name Description HttpConfiguration config The configuration. IDependencyProvider dependencyProvider The dependency provider. Returns Type Description HttpConfiguration HttpConfiguration"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.html",
    "title": "Namespace XPike.IoC.SimpleInjector.AspNetCore | xPike",
    "keywords": "Namespace XPike.IoC.SimpleInjector.AspNetCore Classes IApplicationBuilderExtensions IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike dependency injection abscrations."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IServiceCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike dependency injection abscrations. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector.AspNetCore Assembly : XPike.IoC.SimpleInjector.AspNetCore.dll Syntax public static class IServiceCollectionExtensions Methods | Improve this Doc View Source AddXPikeDependencyInjection(IServiceCollection, Action<SimpleInjectorAddOptions>) Adds the SimpleInjector implementation of XPike dependency injection. Declaration public static IDependencyCollection AddXPikeDependencyInjection(this IServiceCollection services, Action<SimpleInjectorAddOptions> options = null) Parameters Type Name Description IServiceCollection services This instance of IServiceCollection. System.Action < SimpleInjectorAddOptions > options SimpleInjector options. If omitted, configures SimpleInjector for AspNetCore and controller activation. Returns Type Description IDependencyCollection An insance of . Remarks See https://simpleinjector.readthedocs.io/en/latest/aspnetintegration.html"
  },
  "api/ioc/api/XPike.IoC.Microsoft.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.html",
    "title": "Namespace XPike.IoC.Microsoft | xPike",
    "keywords": "Namespace XPike.IoC.Microsoft Classes MicrosoftDependencyCollection MicrosoftDependencyProvider"
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.html",
    "title": "Namespace XPike.IoC.Microsoft.WebApi | xPike",
    "keywords": "Namespace XPike.IoC.Microsoft.WebApi Classes HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI."
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyProviderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyProviderExtensions.html",
    "title": "Class IDependencyProviderExtensions | xPike",
    "keywords": "Class IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.WebApi Assembly : XPike.IoC.Microsoft.WebApi.dll Syntax public static class IDependencyProviderExtensions Methods | Improve this Doc View Source GetContainer(IDependencyProvider) Gets the underlying SimpleInjector container. Declaration public static IServiceProvider GetContainer(this IDependencyProvider dependencyProvider) Parameters Type Name Description IDependencyProvider dependencyProvider The dependency provider. Returns Type Description System.IServiceProvider Container."
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.WebApi Assembly : XPike.IoC.Microsoft.WebApi.dll Syntax public static class IDependencyCollectionExtensions Methods | Improve this Doc View Source Configure(IDependencyCollection, HttpConfiguration) Configures the underlying SimpleInjector container for use with ASP.Net WebAPI. Declaration public static IDependencyCollection Configure(this IDependencyCollection dependencyCollection, HttpConfiguration httpConfiguration) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. HttpConfiguration httpConfiguration The HTTP configuration. Returns Type Description IDependencyCollection IDependencyCollection. | Improve this Doc View Source GetContainer(IDependencyCollection) Gets the underlying SimpleInjector container. Declaration public static IServiceCollection GetContainer(this IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection. Returns Type Description IServiceCollection Container"
  },
  "api/configuration/api/XPike.Configuration.Environment.IEnvironmentConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Environment.IEnvironmentConfigurationProvider.html",
    "title": "Interface IEnvironmentConfigurationProvider | xPike",
    "keywords": "Interface IEnvironmentConfigurationProvider This interface represents a Configuration Providers that retrieves its value from System Environment Variables. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) IConfigurationLoader.Load() Namespace : XPike.Configuration.Environment Assembly : XPike.Configuration.dll Syntax public interface IEnvironmentConfigurationProvider : IConfigurationProvider, IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.ConfigurationServiceBase-1.html": {
    "href": "api/configuration/api/XPike.Configuration.ConfigurationServiceBase-1.html",
    "title": "Class ConfigurationServiceBase<TProvider> | xPike",
    "keywords": "Class ConfigurationServiceBase<TProvider> Abstract base implementation of a Configuration Service. This is effectively a complete implementation, however. It is abstracted away because Configuration Service works identically to Settings Service, except for which type of Provider it uses. This is very convenient since the Configuration Service and Settings Service share a common interface, as do Configuration Provider and Settings Provider. To create a new Configuration Service, just inherit this class and specify the desired type of TProvider. Inheritance System.Object ConfigurationServiceBase<TProvider> ConfigurationService Implements IConfigurationService IConfigurationProvider IConfigurationLoader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public abstract class ConfigurationServiceBase<TProvider> : IConfigurationService, IConfigurationProvider, IConfigurationLoader where TProvider : IConfigurationProvider Type Parameters Name Description TProvider Constructors | Improve this Doc View Source ConfigurationServiceBase(IEnumerable<TProvider>) Declaration public ConfigurationServiceBase(IEnumerable<TProvider> providers) Parameters Type Name Description System.Collections.Generic.IEnumerable <TProvider> providers Fields | Improve this Doc View Source _providers Declaration protected readonly IList<TProvider> _providers Field Value Type Description System.Collections.Generic.IList <TProvider> Methods | Improve this Doc View Source GetValue(String) Declaration public string GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetValue<T>(String) Declaration public T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String | Improve this Doc View Source GetValueOrDefault<T>(String, T) Declaration public T GetValueOrDefault<T>(string key, T defaultValue = null) Parameters Type Name Description System.String key T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Load() Declaration public IDictionary<string, string> Load() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements IConfigurationService IConfigurationProvider IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.ConfigurationService.html": {
    "href": "api/configuration/api/XPike.Configuration.ConfigurationService.html",
    "title": "Class ConfigurationService | xPike",
    "keywords": "Class ConfigurationService Inheritance System.Object ConfigurationServiceBase < IConfigurationProvider > ConfigurationService Implements IConfigurationService IConfigurationProvider IConfigurationLoader Inherited Members ConfigurationServiceBase<IConfigurationProvider>._providers ConfigurationServiceBase<IConfigurationProvider>.GetValueOrDefault(String, String) ConfigurationServiceBase<IConfigurationProvider>.GetValue(String) ConfigurationServiceBase<IConfigurationProvider>.GetValue<T>(String) ConfigurationServiceBase<IConfigurationProvider>.GetValueOrDefault<T>(String, T) ConfigurationServiceBase<IConfigurationProvider>.Load() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class ConfigurationService : ConfigurationServiceBase<IConfigurationProvider>, IConfigurationService, IConfigurationProvider, IConfigurationLoader Constructors | Improve this Doc View Source ConfigurationService(IEnumerable<IConfigurationProvider>) Declaration public ConfigurationService(IEnumerable<IConfigurationProvider> providers) Parameters Type Name Description System.Collections.Generic.IEnumerable < IConfigurationProvider > providers Implements IConfigurationService IConfigurationProvider IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.ConfigLoader-1.html": {
    "href": "api/configuration/api/XPike.Configuration.ConfigLoader-1.html",
    "title": "Class ConfigLoader<TConfig> | xPike",
    "keywords": "Class ConfigLoader<TConfig> Inheritance System.Object ConfigLoader<TConfig> Implements IConfigLoader <TConfig> IConfig <TConfig> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class ConfigLoader<TConfig> : IConfigLoader<TConfig>, IConfig<TConfig> where TConfig : class Type Parameters Name Description TConfig Constructors | Improve this Doc View Source ConfigLoader(IConfigManager<TConfig>) Declaration public ConfigLoader(IConfigManager<TConfig> configManager) Parameters Type Name Description IConfigManager <TConfig> configManager Properties | Improve this Doc View Source ConfigurationKey Declaration public string ConfigurationKey { get; } Property Value Type Description System.String | Improve this Doc View Source RetrievedUtc Declaration public DateTime RetrievedUtc { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Value Declaration public TConfig Value { get; } Property Value Type Description TConfig Implements IConfigLoader<TConfig> IConfig<TConfig>"
  },
  "api/configuration/api/XPike.Configuration.Config-1.html": {
    "href": "api/configuration/api/XPike.Configuration.Config-1.html",
    "title": "Class Config<TConfig> | xPike",
    "keywords": "Class Config<TConfig> Inheritance System.Object Config<TConfig> Implements IConfig <TConfig> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class Config<TConfig> : IConfig<TConfig> where TConfig : class Type Parameters Name Description TConfig Constructors | Improve this Doc View Source Config(String, TConfig) Declaration public Config(string configKey, TConfig config) Parameters Type Name Description System.String configKey TConfig config Properties | Improve this Doc View Source ConfigurationKey Declaration public string ConfigurationKey { get; } Property Value Type Description System.String | Improve this Doc View Source RetrievedUtc Declaration public DateTime RetrievedUtc { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Value Declaration public TConfig Value { get; } Property Value Type Description TConfig Implements IConfig<TConfig>"
  },
  "api/configuration/api/XPike.Configuration.Azure.html": {
    "href": "api/configuration/api/XPike.Configuration.Azure.html",
    "title": "Namespace XPike.Configuration.Azure | xPike",
    "keywords": "Namespace XPike.Configuration.Azure Classes AzureConfigurationProvider Retrieves Configuration values from the Azure App Configuration Service. This is done using the cross-platform-compatible Azure Client SDK. This implementation does not provide any of the advanced feature set such as Configuration Builders, that the ASP.NET Core and .NET Framework variants offer. Since this constructor requires a Connection String to be passed in, it must be registered using: container.AddSingleton<IConfigurationProvider>(new AzureConfigurationProvider(connectionString)); Package XPike Configuration - Azure App Configuration Services Provider Package Dependencies: XPike.Configuration Singleton Registrations: IAzureConfigurationProvider => AzureConfigurationProvider Collection Registrations: IConfigurationProvider += IAzureConfigurationProvider Interfaces IAzureConfigurationProvider Represents a Configuration Provider that retrieves its settings from the Azure App Configuration Service."
  },
  "api/configuration/api/XPike.Configuration.Azure.AzureConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Azure.AzureConfigurationProvider.html",
    "title": "Class AzureConfigurationProvider | xPike",
    "keywords": "Class AzureConfigurationProvider Retrieves Configuration values from the Azure App Configuration Service. This is done using the cross-platform-compatible Azure Client SDK. This implementation does not provide any of the advanced feature set such as Configuration Builders, that the ASP.NET Core and .NET Framework variants offer. Since this constructor requires a Connection String to be passed in, it must be registered using: container.AddSingleton<IConfigurationProvider>(new AzureConfigurationProvider(connectionString)); Inheritance System.Object ConfigurationProviderBase AzureConfigurationProvider Implements IAzureConfigurationProvider IConfigurationProvider Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Azure Assembly : XPike.Configuration.Azure.dll Syntax public class AzureConfigurationProvider : ConfigurationProviderBase, IAzureConfigurationProvider, IConfigurationProvider Constructors | Improve this Doc View Source AzureConfigurationProvider(String) Declaration public AzureConfigurationProvider(string connectionString) Parameters Type Name Description System.String connectionString Methods | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) Implements IAzureConfigurationProvider IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.AWS.Package.html": {
    "href": "api/configuration/api/XPike.Configuration.AWS.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package Inheritance System.Object Package Namespace : XPike.Configuration.AWS Assembly : XPike.Configuration.AWS.dll Syntax public class Package : IDependencyPackage Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection"
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.ServiceProviderVerificationException.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.ServiceProviderVerificationException.html",
    "title": "Class ServiceProviderVerificationException | xPike",
    "keywords": "Class ServiceProviderVerificationException A ServiceProviderVerificationException is thrown when the container fails to verify. Inheritance System.Object System.Exception ServiceProviderVerificationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax [Serializable] public class ServiceProviderVerificationException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source ServiceProviderVerificationException(IEnumerable<VerificationResult>) Initializes a new instance of the ServiceProviderVerificationException class. Declaration public ServiceProviderVerificationException(IEnumerable<VerificationResult> results) Parameters Type Name Description System.Collections.Generic.IEnumerable < VerificationResult > results The exceptions. | Improve this Doc View Source ServiceProviderVerificationException(SerializationInfo, StreamingContext) Initializes a new instance of the ServiceProviderVerificationException class. Declaration protected ServiceProviderVerificationException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo The serialization information. System.Runtime.Serialization.StreamingContext streamingContext The streaming context. Exceptions Type Condition System.NotImplementedException Properties | Improve this Doc View Source Results Gets a list of VerificationResult s that occurred during verification. Declaration public IEnumerable<VerificationResult> Results { get; } Property Value Type Description System.Collections.Generic.IEnumerable < VerificationResult > An array of exceptions. Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo with information about the exception. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The System.Runtime.Serialization.StreamingContext that contains contextual information about the source or destination. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) Exceptions Type Condition System.ArgumentNullException info Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also System.Exception"
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.Owin.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.Owin.html",
    "title": "Namespace XPike.Extensions.DependencyInjection.Owin | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection.Owin Classes DependencyInjectionMiddleware Supports using Microsoft.Extensions.DependencyInjection in the Owin middleware pipeline. Implements the This should be the first middleware in the pipeline. IAppBuilderExtensions Extension methods for IAppBuilder to suppport the use of Microsoft.Extensions.DependencyInjection in Owin applications."
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.Owin.IAppBuilderExtensions.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.Owin.IAppBuilderExtensions.html",
    "title": "Class IAppBuilderExtensions | xPike",
    "keywords": "Class IAppBuilderExtensions Extension methods for IAppBuilder to suppport the use of Microsoft.Extensions.DependencyInjection in Owin applications. Inheritance System.Object IAppBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection.Owin Assembly : XPike.Extensions.DependencyInjection.Owin.dll Syntax public static class IAppBuilderExtensions Methods | Improve this Doc View Source UseMicrosoftDependencyInjection(IAppBuilder, IServiceProvider, HttpConfiguration) Configures and uses Microsoft dependency injection for this application. This should be first in the pipeline. Declaration public static IAppBuilder UseMicrosoftDependencyInjection(this IAppBuilder app, IServiceProvider provider, HttpConfiguration configuration) Parameters Type Name Description IAppBuilder app This IAppBuilder instance. System.IServiceProvider provider The IServiceProvider instance. HttpConfiguration configuration The HttpConfiguration instance for this application. Returns Type Description IAppBuilder IAppBuilder Examples public class Startup { public void Configuration(IAppBuilder app) { HttpConfiguration config = new HttpConfiguration(); config.MapHttpAttributeRoutes(); IServiceProvider provider = ConfigureServices(); app.UseMicrosoftDependencyInjection(provider, config); app.UseWebApi(config); } private IServiceProvider ConfigureServices() { IDependencyCollection services = new ServicesCollection(); // register services services.AddSingleton&lt;ILogger, Logger>(); // Add the WebApi controllers to the collection services.AddApiControllers(); return services.BuildServiceProvider(); } } Exceptions Type Condition System.ArgumentNullException app System.ArgumentNullException provider System.ArgumentNullException configuration"
  },
  "api/ioc/api/XPike.IoC.html": {
    "href": "api/ioc/api/XPike.IoC.html",
    "title": "Namespace XPike.IoC | xPike",
    "keywords": "Namespace XPike.IoC Classes DependencyVerificationException A DependencyVerificationException is thrown when the container fails to verify. IDependencyCollectionExtensions IDependencyCollection Extensions. Interfaces IDependencyCollection Interface implememented by all dependency injection providers for registering services. IDependencyPackage Implemented by dependency packages IDependencyProvider Interface implememented by all dependency injection providers for resolving services and their dependencies."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.html",
    "title": "Namespace XPike.IoC.SimpleInjector | xPike",
    "keywords": "Namespace XPike.IoC.SimpleInjector Classes HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyCollectionExtensions Extension methods for IDependencyCollection to support configuring SimpleInjector with xPike in ASP.Net WebAPI. IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. SimpleInjectorDependencyCollection SimpleInjectorDependencyProvider"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyProvider.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyProvider.html",
    "title": "Class SimpleInjectorDependencyProvider | xPike",
    "keywords": "Class SimpleInjectorDependencyProvider Inheritance System.Object SimpleInjectorDependencyProvider Implements IDependencyProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.dll Syntax public class SimpleInjectorDependencyProvider : IDependencyProvider Properties | Improve this Doc View Source Container Declaration public Container Container { get; } Property Value Type Description Container Methods | Improve this Doc View Source BeginScope() Declaration public IDisposable BeginScope() Returns Type Description System.IDisposable | Improve this Doc View Source ResolveDependencies<TService>() Declaration public IEnumerable<TService> ResolveDependencies<TService>() where TService : class Returns Type Description System.Collections.Generic.IEnumerable <TService> Type Parameters Name Description TService | Improve this Doc View Source ResolveDependency(Type) Declaration public object ResolveDependency(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object | Improve this Doc View Source ResolveDependency<TService>() Declaration public TService ResolveDependency<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService | Improve this Doc View Source Verify() Declaration public void Verify() Implements IDependencyProvider Extension Methods IDependencyProviderExtensions.GetContainer(IDependencyProvider)"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyCollection.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.SimpleInjectorDependencyCollection.html",
    "title": "Class SimpleInjectorDependencyCollection | xPike",
    "keywords": "Class SimpleInjectorDependencyCollection Inheritance System.Object SimpleInjectorDependencyCollection Implements IDependencyCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.dll Syntax public class SimpleInjectorDependencyCollection : IDependencyCollection Constructors | Improve this Doc View Source SimpleInjectorDependencyCollection() Declaration public SimpleInjectorDependencyCollection() Properties | Improve this Doc View Source Container Gets the underlying SimpleInjector container instance. Declaration public Container Container { get; } Property Value Type Description Container The container. Methods | Improve this Doc View Source AddSingletonToCollection(Type, Type) Declaration public void AddSingletonToCollection(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source AddSingletonToCollection<TService>(TService) Declaration public void AddSingletonToCollection<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService | Improve this Doc View Source AddSingletonToCollection<TService, TImplementation>() Declaration public void AddSingletonToCollection<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService>) Declaration public void AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService> implementationFactory) where TService : class where TImplementation : class, TService Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService TImplementation | Improve this Doc View Source BuildDependencyProvider(Boolean) Declaration public IDependencyProvider BuildDependencyProvider(bool verifyOnBuild = true) Parameters Type Name Description System.Boolean verifyOnBuild Returns Type Description IDependencyProvider | Improve this Doc View Source RegisterScoped(Type, Type) Declaration public void RegisterScoped(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterScoped<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterScoped<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService | Improve this Doc View Source RegisterScoped<TService, TImplementation>() Declaration public void RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source RegisterSingleton(Type, Type) Declaration public void RegisterSingleton(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterSingleton<TService>(TService) Declaration public void RegisterSingleton<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService | Improve this Doc View Source RegisterSingleton<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterSingleton<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService | Improve this Doc View Source RegisterSingleton<TService, TImplementation>() Declaration public void RegisterSingleton<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source RegisterSingletonFallback(Type, Type) Declaration public void RegisterSingletonFallback(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterTransient(Type, Type) Declaration public void RegisterTransient(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterTransient<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterTransient<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService | Improve this Doc View Source RegisterTransient<TService, TImplementation>() Declaration public void RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source ResetCollection<TService>() Declaration public void ResetCollection<TService>() Type Parameters Name Description TService Implements IDependencyCollection Extension Methods IDependencyCollectionExtensions.GetContainer(IDependencyCollection) IDependencyCollectionExtensions.Configure(IDependencyCollection, HttpConfiguration)"
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyProviderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.IDependencyProviderExtensions.html",
    "title": "Class IDependencyProviderExtensions | xPike",
    "keywords": "Class IDependencyProviderExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object IDependencyProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector Assembly : XPike.IoC.SimpleInjector.WebAPI.dll Syntax public static class IDependencyProviderExtensions Methods | Improve this Doc View Source GetContainer(IDependencyProvider) Gets the underlying SimpleInjector container. Declaration public static Container GetContainer(this IDependencyProvider dependencyProvider) Parameters Type Name Description IDependencyProvider dependencyProvider The dependency provider. Returns Type Description Container Container."
  },
  "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IApplicationBuilderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.SimpleInjector.AspNetCore.IApplicationBuilderExtensions.html",
    "title": "Class IApplicationBuilderExtensions | xPike",
    "keywords": "Class IApplicationBuilderExtensions Inheritance System.Object IApplicationBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.SimpleInjector.AspNetCore Assembly : XPike.IoC.SimpleInjector.AspNetCore.dll Syntax public static class IApplicationBuilderExtensions Methods | Improve this Doc View Source UseXPikeDependencyInjection(IApplicationBuilder, Action<SimpleInjectorUseOptions>) Declaration public static IDependencyProvider UseXPikeDependencyInjection(this IApplicationBuilder app, Action<SimpleInjectorUseOptions> options = null) Parameters Type Name Description IApplicationBuilder app System.Action < SimpleInjectorUseOptions > options Returns Type Description IDependencyProvider"
  },
  "api/ioc/api/XPike.IoC.Owin.html": {
    "href": "api/ioc/api/XPike.IoC.Owin.html",
    "title": "Namespace XPike.IoC.Owin | xPike",
    "keywords": "Namespace XPike.IoC.Owin Classes IAppBuilderExtensions Extension methods for IAppBuilder so support xPike dependency injection. XPikeDependencyInjectionMiddleware OWIN Middleware for using XPike Dependency Injection with OWIN hosted services. Implements the"
  },
  "api/ioc/api/XPike.IoC.Owin.XPikeDependencyInjectionMiddleware.html": {
    "href": "api/ioc/api/XPike.IoC.Owin.XPikeDependencyInjectionMiddleware.html",
    "title": "Class XPikeDependencyInjectionMiddleware | xPike",
    "keywords": "Class XPikeDependencyInjectionMiddleware OWIN Middleware for using XPike Dependency Injection with OWIN hosted services. Implements the Inheritance System.Object XPikeDependencyInjectionMiddleware Namespace : XPike.IoC.Owin Assembly : XPike.IoC.Owin.dll Syntax public class XPikeDependencyInjectionMiddleware : OwinMiddleware Constructors | Improve this Doc View Source XPikeDependencyInjectionMiddleware(OwinMiddleware, IDependencyProvider) Initializes a new instance of the XPikeDependencyInjectionMiddleware class. Declaration public XPikeDependencyInjectionMiddleware(OwinMiddleware next, IDependencyProvider dependencyProvider) Parameters Type Name Description OwinMiddleware next The next middleware in the pipeline. IDependencyProvider dependencyProvider The dependency provider instance. Methods | Improve this Doc View Source Invoke(IOwinContext) Process an individual request. Declaration public override Task Invoke(IOwinContext context) Parameters Type Name Description IOwinContext context The context. Returns Type Description System.Threading.Tasks.Task"
  },
  "api/ioc/api/XPike.IoC.Owin.IAppBuilderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Owin.IAppBuilderExtensions.html",
    "title": "Class IAppBuilderExtensions | xPike",
    "keywords": "Class IAppBuilderExtensions Extension methods for IAppBuilder so support xPike dependency injection. Inheritance System.Object IAppBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Owin Assembly : XPike.IoC.Owin.dll Syntax public static class IAppBuilderExtensions Methods | Improve this Doc View Source UseXPikeDependencyInjection(IAppBuilder, Func<IDependencyProvider>) Uses xPike dependency injection. Declaration public static IAppBuilder UseXPikeDependencyInjection(this IAppBuilder app, Func<IDependencyProvider> dependencyProviderFactoryDelegate) Parameters Type Name Description IAppBuilder app The application. System.Func < IDependencyProvider > dependencyProviderFactoryDelegate The dependency provider factory delegate. Returns Type Description IAppBuilder IAppBuilder. | Improve this Doc View Source UseXPikeDependencyInjection(IAppBuilder, IDependencyProvider) Uses xPike dependency injection. Declaration public static IAppBuilder UseXPikeDependencyInjection(this IAppBuilder app, IDependencyProvider dependencyProvider) Parameters Type Name Description IAppBuilder app The application. IDependencyProvider dependencyProvider The dependency provider. Returns Type Description IAppBuilder IAppBuilder. | Improve this Doc View Source UseXPikeDependencyInjection(IAppBuilder, IDependencyProvider, IDependencyPackage) Uses xPike dependency injection. Declaration public static IAppBuilder UseXPikeDependencyInjection(this IAppBuilder app, IDependencyProvider dependencyProvider, IDependencyPackage applicationPackage) Parameters Type Name Description IAppBuilder app The application. IDependencyProvider dependencyProvider The dependency provider. IDependencyPackage applicationPackage The application package. Returns Type Description IAppBuilder IAppBuilder."
  },
  "api/ioc/api/XPike.IoC.IDependencyCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions IDependencyCollection Extensions. Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public static class IDependencyCollectionExtensions Methods | Improve this Doc View Source LoadPackage(IDependencyCollection, IDependencyPackage) Can be optionally used to reduce the overhead of repeatedly registering the same packages once they are loaded. Declaration public static IDependencyCollection LoadPackage(this IDependencyCollection dependencyCollection, IDependencyPackage package) Parameters Type Name Description IDependencyCollection dependencyCollection This instance. IDependencyPackage package The package to load. Returns Type Description IDependencyCollection"
  },
  "api/ioc/api/XPike.IoC.IDependencyCollection.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyCollection.html",
    "title": "Interface IDependencyCollection | xPike",
    "keywords": "Interface IDependencyCollection Interface implememented by all dependency injection providers for registering services. Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public interface IDependencyCollection Remarks Expected Implementation Behavior xPike modules expect that the RegisterXXXX(...) methods will replace an existing registration if on already exists for the supplied service type. This allows you to override default registration with your own without having to first remove any existing registrations. Methods | Improve this Doc View Source AddSingletonToCollection(Type, Type) For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. | Improve this Doc View Source AddSingletonToCollection<TService>(TService) For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection<TService>(TService instance) where TService : class Parameters Type Name Description TService instance The instance. Type Parameters Name Description TService The type of the service. | Improve this Doc View Source AddSingletonToCollection<TService, TImplementation>() For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection<TService, TImplementation>() where TService : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. | Improve this Doc View Source AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService>) For use when adding an implementation which will be retrieved as part of a collection. Declaration void AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService> implementationFactory) where TService : class where TImplementation : class, TService Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. TImplementation The implementation type the delegate will return. | Improve this Doc View Source BuildDependencyProvider(Boolean) Builds the dependency provider. Declaration IDependencyProvider BuildDependencyProvider(bool verifyOnBuild = true) Parameters Type Name Description System.Boolean verifyOnBuild if set to true , Verify() will be called implicitly. Returns Type Description IDependencyProvider IDependencyProvider. | Improve this Doc View Source RegisterScoped(Type, Type) Adds a service to the container with a scoped lifetime. Declaration void RegisterScoped(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. | Improve this Doc View Source RegisterScoped<TService>(Func<IDependencyProvider, TService>) Registers a service with a scoped lifetime. Declaration void RegisterScoped<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. | Improve this Doc View Source RegisterScoped<TService, TImplementation>() Adds a service to the container with a scoped lifetime. Declaration void RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. | Improve this Doc View Source RegisterSingleton(Type, Type) Adds a service to the container as a singleton. Declaration void RegisterSingleton(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType The interface type. System.Type implementationType The implementation type. | Improve this Doc View Source RegisterSingleton<TService>(TService) Adds a service to the container as a singleton. Declaration void RegisterSingleton<TService>(TService instance) where TService : class Parameters Type Name Description TService instance The instance. Type Parameters Name Description TService The type of the t service. | Improve this Doc View Source RegisterSingleton<TService>(Func<IDependencyProvider, TService>) Adds a service to the container as a singleton. Declaration void RegisterSingleton<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. | Improve this Doc View Source RegisterSingleton<TService, TImplementation>() Adds a service to the container as a singleton. Declaration void RegisterSingleton<TService, TImplementation>() where TService : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. | Improve this Doc View Source RegisterSingletonFallback(Type, Type) Adds a service to the container as a singleton. Declaration void RegisterSingletonFallback(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. | Improve this Doc View Source RegisterTransient(Type, Type) Adds a service to the container with a transient lifetime. Declaration void RegisterTransient(Type interfaceType, Type implementationType) Parameters Type Name Description System.Type interfaceType Type of the interface. System.Type implementationType Type of the implementation. | Improve this Doc View Source RegisterTransient<TService>(Func<IDependencyProvider, TService>) Adds a service to the container with a transient lifetime. Declaration void RegisterTransient<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory A factory delegate that creates and returns and instance of TService . Type Parameters Name Description TService The service type to register. | Improve this Doc View Source RegisterTransient<TService, TImplementation>() Adds a service to the container with a transient lifetime. Declaration void RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService The service type to register. TImplementation The concrete implementation class. | Improve this Doc View Source ResetCollection<TService>() Clears all registrations for type TService . Declaration void ResetCollection<TService>() Type Parameters Name Description TService The type of the service. Extension Methods IDependencyCollectionExtensions.LoadPackage(IDependencyCollection, IDependencyPackage) IDependencyCollectionExtensions.GetContainer(IDependencyCollection) IDependencyCollectionExtensions.Configure(IDependencyCollection, HttpConfiguration)"
  },
  "api/ioc/api/XPike.IoC.DependencyVerificationException.html": {
    "href": "api/ioc/api/XPike.IoC.DependencyVerificationException.html",
    "title": "Class DependencyVerificationException | xPike",
    "keywords": "Class DependencyVerificationException A DependencyVerificationException is thrown when the container fails to verify. Inheritance System.Object System.Exception DependencyVerificationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax [Serializable] public class DependencyVerificationException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source DependencyVerificationException(Exception[]) Initializes a new instance of the DependencyVerificationException class. Declaration public DependencyVerificationException(Exception[] exceptions) Parameters Type Name Description System.Exception [] exceptions The exceptions. | Improve this Doc View Source DependencyVerificationException(SerializationInfo, StreamingContext) Initializes a new instance of the DependencyVerificationException class. Declaration protected DependencyVerificationException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo The serialization information. System.Runtime.Serialization.StreamingContext streamingContext The streaming context. Properties | Improve this Doc View Source Exceptions Gets a list of exceptions that occurred during verification. Declaration public IEnumerable<Exception> Exceptions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Exception > An array of exceptions. Remarks Different containers will throw different exceptions. Don't assume these exceptions will be the same across DI implementations. DependencyVerificationException is the abstraction. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also System.Exception"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.html",
    "title": "Namespace XPike.Extensions.DependencyInjection | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection Classes IServiceCollectionExtensions Extension methods for IServiceCollection. IServiceProviderExtensions Extension methods for IServiceProvider, to enhance the features and functionality of Microsoft.Extensions.DependencyInjection. ServiceProviderVerificationException A ServiceProviderVerificationException is thrown when the container fails to verify. VerificationResult Encapsulates the result of a failed attempt to verify a registered type in the container."
  },
  "api/configuration/api/XPike.Configuration.System.html": {
    "href": "api/configuration/api/XPike.Configuration.System.html",
    "title": "Namespace XPike.Configuration.System | xPike",
    "keywords": "Namespace XPike.Configuration.System Classes Package XPike Configuration - System.Configuration.ConfigurationManager Provider Package Dependencies: XPike.Configuration Singleton Registrations: ISystemConfigurationProvider => SystemConfigurationProvider Collection Registrations: IConfigurationProvider += ISystemConfigurationProvider SystemConfigurationProvider Configuration Provider which uses System.Configuration.ConfigurationManager to retrieve values from either app.config or web.config. Can be used in either .NET Framework or .NET Core. Interfaces ISystemConfigurationProvider Defines a Configuration Provider that retrieves its values from app.config / web.config."
  },
  "api/configuration/api/XPike.Configuration.System.SystemConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.System.SystemConfigurationProvider.html",
    "title": "Class SystemConfigurationProvider | xPike",
    "keywords": "Class SystemConfigurationProvider Configuration Provider which uses System.Configuration.ConfigurationManager to retrieve values from either app.config or web.config. Can be used in either .NET Framework or .NET Core. Inheritance System.Object ConfigurationProviderBase SystemConfigurationProvider Implements ISystemConfigurationProvider IConfigurationProvider Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.System Assembly : XPike.Configuration.System.dll Syntax public class SystemConfigurationProvider : ConfigurationProviderBase, ISystemConfigurationProvider, IConfigurationProvider Methods | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) Implements ISystemConfigurationProvider IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.System.Package.html": {
    "href": "api/configuration/api/XPike.Configuration.System.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package XPike Configuration - System.Configuration.ConfigurationManager Provider Package Dependencies: XPike.Configuration Singleton Registrations: ISystemConfigurationProvider => SystemConfigurationProvider Collection Registrations: IConfigurationProvider += ISystemConfigurationProvider Inheritance System.Object Package Namespace : XPike.Configuration.System Assembly : XPike.Configuration.System.dll Syntax public class Package : IDependencyPackage Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection container) Parameters Type Name Description IDependencyCollection container"
  },
  "api/configuration/api/XPike.Configuration.Null.INullConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Null.INullConfigurationProvider.html",
    "title": "Interface INullConfigurationProvider | xPike",
    "keywords": "Interface INullConfigurationProvider This interface represents a Configuration Provider that yields no values. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) IConfigurationLoader.Load() Namespace : XPike.Configuration.Null Assembly : XPike.Configuration.dll Syntax public interface INullConfigurationProvider : IConfigurationProvider, IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.Package.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package XPike Configuration - Microsoft.Extensions.Configuration Provider Package Dependencies: XPike.Configuration Singleton Registrations: IMicrosoftConfigurationProvier => MicrosoftConfigurationProvider Collection Registrations: IConfigurationProvider => IMicrosoftConfigurationProvider Inheritance System.Object Package Namespace : XPike.Configuration.Microsoft Assembly : XPike.Configuration.Microsoft.dll Syntax public class Package : IDependencyPackage Constructors | Improve this Doc View Source Package() Declaration public Package() | Improve this Doc View Source Package(IConfiguration) Declaration public Package(IConfiguration configuration) Parameters Type Name Description IConfiguration configuration Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection container) Parameters Type Name Description IDependencyCollection container"
  },
  "articles/license.html": {
    "href": "articles/license.html",
    "title": "License | xPike",
    "keywords": "License All xPike code and packages are licensed under the MIT license and are free to use in commercial production environments. MIT License Copyright (c) 2019, xPike committers Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | xPike",
    "keywords": "Add your introductions here!"
  },
  "api/settings/api/index.html": {
    "href": "api/settings/api/index.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Settings provides application settings management for the xPike paved-road. xPike Settings is the recommended source for application settings. It uses xPike Configuration as its configuration source by default, and other providers can be added. In addition, it adds a configurable layer of caching, as well as settings refresh capabilities. Settings Providers are fully DI-managed objects (unlike Configuration Providers). The use of Settings in xPike is analogous to IOptions in Asp.Net Core. Examples Working examples can be found on GitHub . Usage Define your Settings POCO using XPike.Settings; namespace MyLibrary { public class MySettings { public string CompanyName { get; set; } public IList<DateTime> UpcomingHolidays { get; set; } public IDictionary<string, string> LocationPhoneNumbers { get; set; } } } Load Automatically from JSON xPike supports a \"touchless\" settings system. Just inject ISettings<MySettings> wherever you want. xPike will search for a setting with a matching fully-qualified class name (eg \"MyLibrary.MySettings\" ). The settings will be deserialized from a JSON string. Note: This may vary by Provider. The value can come from any of the registered Configuration or Settings Providers. xPike Settings will handle caching and periodic refresh automatically. Specifying Options The built-in Settings Manager allows you to specify a custom configuration key. You can also specify an action to be called upon load to further customize your settings. container.RegisterSingleton<ISettingsManager<MySettings>>(provider => new SettingsManager(provider.ResolveDependency<ISettingsService>(), \"myCustomKey\", settings => { // further customization of settings object return settings; }); Custom Settings Manager For the most flexibility, you can specify your own Settings Manager. using XPike.Settings; namespace MyLibrary { public class MySettingsManager : SettingsManagerBase<MySettings> { protected override string ConfigurationKey => $\"{nameof(MyLibrary)}::{nameof(MySettings)}\"; public MySettingsManager(ISettingsService settingsService) : base(settingsService) { } public override ISettings<TSettings> GetSettings() { var settings = new MySettings { CompanyName = GetValue(\"CompanyName\"), UpcomingHolidays = GetValue<IList<DateTime>>(\"UpcomingHolidays\"), LocationPhoneNumbers = string.Split(new[] {','}, GetValueOrDefault(\"LocationPhoneNumbers\", \"555-1212\")) }; return new Settings(ConfigurationKey, settings); } } } Registering your Custom Settings Manager container.RegisterSingleton<ISettingsManager<MySettings>, MySettingsManager>(); Note: If you are using SimpleInjector for dependency injection, then you must be certain that any custom Settings Managers are registered before the Settings Package . Since a Package can load other Packages, this may require that you define them at the start of your top-level Package. Some things to note: The GetValue() and GetValueOrDefault() overloads on SettingsManager<TSettings> prepend the ConfigurationKey to the specified key . The default ConfigurationKey is the full class and namespace of the Settings POCO. In this example, the call to GetValue<IList<DateTime>>(...) loads its value from a JSON string in the MyLibrary.MySettings::UpcomingHolidays key. Packages XPike.Configuration Abstractions used by the rest of xPike. This package also contains the configuration providers: EnvironmentConfigurationProvider: Storing/retrieving configuration using environment variables. NullConfigurationProvider: A Configuration Provider that yields no values. Primarily intended for use in unit/integration tests. Xpike.Configuration.AWS Support for storing/retrieving configuration using AWS Simple Parameter Store and AWS Secrets Manager. XPike.Configuration.Azure Support for storing/retrieving configuration using Azure Application Configuration Service. Important Azure Application Configuration Service is in preview and Microsoft seems to be publishing breaking changes with each release. We don't recommend using this in production. We have provided support for experimentation and readiness for when Microsoft releases GA. Xpike.Configuration.Microsoft Provides configuration values to XPike by delegating lookups to the Microsoft.Extensions.Configuration.IConfiguration service. Xpike.Configuration.Microsoft.AspNetCore The inverse of Xpike.Configuration.Microsoft . This packages allows Microsoft.Extensions.Configuration.IConfiguration to use XPike.Configuration as a source. Xpike.Configuration.System Support for storing/retrieving configuration using System.Configuration--i.e. from App.Config and Web.Config."
  },
  "api/configuration/articles/intro.html": {
    "href": "api/configuration/articles/intro.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Configuration provides configuration abstractions and default implementations for the xPike paved-road. XPike Configuration is intended for use before Dependency Injection is configured, to provide some basic bootstrap settings. Because of this, Configuration Providers should not require injected dependencies. Providers are wrapped by the Configuration Service which scans them in reverse order, returning the first value it finds. While Providers can be used directly, the Configuration Service should be your go-to (and it is compatible with .NET Core IConfiguration ). Though the Configuration Service does not rely on DI, it is intended to be registered with the container along with any Providers. This is because XPike Settings (which adds capabilities such as caching and refresh - similar to .NET Core IOptions ) relies on the Configuration Service as its default Settings Provider. For application-oriented settings, it is recommended to use the XPike.Settings Package to retrieve a settings POCO. Examples Working examples can be found on GitHub . Packages XPike.Configuration Abstractions used by the rest of xPike. This package also contains the configuration providers: EnvironmentConfigurationProvider: Storing/retrieving configuration using environment variables. NullConfigurationProvider: A Configuration Provider that yields no values. Primarily intended for use in unit/integration tests. Xpike.Configuration.AWS Support for storing/retrieving configuration using AWS Simple Parameter Store and AWS Secrets Manager. XPike.Configuration.Azure Support for storing/retrieving configuration using Azure Application Configuration Service. Important Azure Application Configuration Service is in preview and Microsoft seems to be publishing breaking changes with each release. We don't recommend using this in production. We have provided support for experimentation and readiness for when Microsoft releases GA. Xpike.Configuration.Microsoft Provides configuration values to XPike by delegating lookups to the Microsoft.Extensions.Configuration.IConfiguration service. Xpike.Configuration.Microsoft.AspNetCore The inverse of Xpike.Configuration.Microsoft . This packages allows Microsoft.Extensions.Configuration.IConfiguration to use XPike.Configuration as a source. Xpike.Configuration.System Support for storing/retrieving configuration using System.Configuration--i.e. from App.Config and Web.Config."
  },
  "api/ioc/api/index.html": {
    "href": "api/ioc/api/index.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike IoC provides inversion of control and dependency injection abstractions and default implementations for the xPike paved-road. Packages XPike.IoC Abstractions used by the rest of xPike. Xpike.IoC.Owin Support for using xPike dependency injection in Owin applications. XPike.IoC.Microsoft An XPike.IoC provider implementation for Microsoft.Extensions.DependencyInjection. Xpike.IoC.SimpleInjector An XPike.IoC provider implementation for SimpleInjector."
  },
  "api/extensions/articles/verifying-the-container.html": {
    "href": "api/extensions/articles/verifying-the-container.html",
    "title": "Verifying the Container | xPike",
    "keywords": "Verifying the Container A common mistake we make is forgetting to register a type with the container. Another is having a singleton depend on a transient (or other lesser scoped) registration. xPike Extensions solves this by providing the cabability to verify your IServiceProvider instance at startup. This ensures that: All root objects and their dependencies can be resolved. Singletons only depend on other singletons. Scoped registrations only depend on singletons and other scoped registrations. Verifying the container configuration at startup can signifcantly reduce production issues caused by missing or improper registrations not identified during testing. Step 1 Install the XPike.Extensions.DependencyInjection package: dotnet add package XPike.Extensions.DependencyInjection or Install-Package XPike.Extensions.DependencyInjection Step 2 Call the extension method on IServiceCollection to add the verification functionality to the provider: using Xpike.Extensions.DependencyInjection; ... public void ConfigureServices(IServiceCollection services) { services.AddMvc(); ... services.AddServiceProviderVerification(); } Step 3 Call the extension method on IServiceProvider to verify the container: public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.ApplicationServices.Verify(); //this should be the first thing you do. ... app.UseMvc(); } When Verification Fails If the container fails to verify for one or more reasons, a ServiceProviderVerificationException is thrown. The exception contains a Results property, providing an IEnumerable of VerifcationResults that can be inspected for details about why the container failed to validate. Performance Considerations There is a performance hit at startup. The impact depends on the number of registrations. You may want to only verify the container in non-production environments. Assuming you have your ASPNETCORE_ENVIRONMENT set properly for each environment, you can simply... public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (!env.IsProduction()) app.ApplicationServices.Verify(); ... app.UseMvc(); }"
  },
  "api/extensions/articles/intro.html": {
    "href": "api/extensions/articles/intro.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Extensions provides features enhancements to Microsoft.Extensions. Packages XPike.Extensions.DependencyInjection The XPike.Extensions.DependencyInjection package add functionality to Microsoft's DI container ( Microsoft.Extensions.DependencyInjection ). These extensions can be used independent of the xPike paved-road and take no dependencies on other xPike packages. XPike.Extensions.DependencyInjection.WebApi The XPike.Extensions.WebApi package provides support for using Microsoft.Extensions.DependencyInjection in legacy ASP.Net WebAPI applications."
  },
  "api/configuration/api/index.html": {
    "href": "api/configuration/api/index.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Configuration provides configuration abstractions and default implementations for the xPike paved-road. XPike Configuration is intended for use before Dependency Injection is configured, to provide some basic bootstrap settings. Because of this, Configuration Providers should not require injected dependencies. Providers are wrapped by the Configuration Service which scans them in reverse order, returning the first value it finds. While Providers can be used directly, the Configuration Service should be your go-to (and it is compatible with .NET Core IConfiguration ). Though the Configuration Service does not rely on DI, it is intended to be registered with the container along with any Providers. This is because XPike Settings (which adds capabilities such as caching and refresh - similar to .NET Core IOptions ) relies on the Configuration Service as its default Settings Provider. For application-oriented settings, it is recommended to use the XPike.Settings Package to retrieve a settings POCO. Examples Working examples can be found on GitHub . Packages XPike.Configuration Abstractions used by the rest of xPike. This package also contains the configuration providers: EnvironmentConfigurationProvider: Storing/retrieving configuration using environment variables. NullConfigurationProvider: A Configuration Provider that yields no values. Primarily intended for use in unit/integration tests. Xpike.Configuration.AWS Support for storing/retrieving configuration using AWS Simple Parameter Store and AWS Secrets Manager. XPike.Configuration.Azure Support for storing/retrieving configuration using Azure Application Configuration Service. Important Azure Application Configuration Service is in preview and Microsoft seems to be publishing breaking changes with each release. We don't recommend using this in production. We have provided support for experimentation and readiness for when Microsoft releases GA. Xpike.Configuration.Microsoft Provides configuration values to XPike by delegating lookups to the Microsoft.Extensions.Configuration.IConfiguration service. Xpike.Configuration.Microsoft.AspNetCore The inverse of Xpike.Configuration.Microsoft . This packages allows Microsoft.Extensions.Configuration.IConfiguration to use XPike.Configuration as a source. Xpike.Configuration.System Support for storing/retrieving configuration using System.Configuration--i.e. from App.Config and Web.Config."
  },
  "index.html": {
    "href": "index.html",
    "title": "xPike - The Paved-Road for Microservices in .Net | xPike",
    "keywords": "xPike - The Paved-Road for Microservices in .Net Mission Provide a paved road of cross-cutting concerns and best practices for building high quality, reliable, cloud-native microservices and distributed systems in .Net and .Net Core. Highlights Key goals are to provide a cross-cutting, cohesive framework which suggests a single paved road to success, without constraining you to follow that path. While we try not to be opinioned like other frameworks, we do provide sensible defaults. Highly pluggable and customizable, strongly encourages and enables test-oriented development. Primary feature set targeting \"universal areas of concern\" such as logging, metrics, settings management, dependency injection, data access, inter-service communication (events, queues, HTTP, gRPC), transient fault management (\"circuit breakers\"), etc. Providers are available for common RDBMS systems, cloud services in AWS and Azure, familiar .NET libraries, and many other use cases - it is also easy to create your own custom providers. Using a highly de-coupled architecture and a contract-based design pattern, it is well suited for an evolving service ecosystem and simplifies the decomposition of legacy systems. The \"Paved-Road\" The xPike SDK aims to provide a paved-road of industry demonstrated best practices in service design and operation, including: SOLID principles Observability Configuration separate from code Abstract infrastructure concerns from application logic Platform Support Natively support: .Net Core 2.0 and above .Net 4.5.2 and above Contributing Want to contribute? Read our contributing guidelines . Licensing License information can be found here ."
  },
  "articles/contributing.html": {
    "href": "articles/contributing.html",
    "title": "Contributing | xPike",
    "keywords": "Contributing The project maintainers maintain guidelines for contributing to the xPike repos. A team member will be happy to explain why a guideline is defined as it is. General contribution guidance is included in this document. Up for Grabs Project maintainers mark the most straightforward issues as \"up for grabs\". This set of issues is the place to start if you are interested in contributing but new to the codebase. Contribution \"Bar\" Project maintainers will merge changes that improve the product significantly and broadly and that align with the project mission. Maintainers will not merge changes that have narrowly-defined benefits, due to compatibility risk. Our goal is to keep they project broad and extensible, rather than specific and too opinionated. You are welcome to create your own project/library that extends xPike. If you are unsure, please open an issue and we will be happy to discuss. We may revert changes if they are found to be breaking. Contributions must also satisfy the other published guidelines defined in this document. DOs and DON'Ts Please do: DO follow our coding style (C# code-specific) DO give priority to the current style of the project or file you're changing even if it diverges from the general guidelines. DO include tests when adding new features. When fixing bugs, start with adding a test that highlights how the current behavior is broken. Changes without corresponding tests will be rejected. DO include documentation when adding new features. Changes without corresponding documentation will be rejected. DO keep the discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the discussion. DO blog and tweet (or whatever) about your contributions, frequently! Please do not: DON'T make PRs for style changes. DON'T surprise us with big pull requests. Instead, file an issue and start a discussion so we can agree on a direction before you invest a large amount of time. DON'T commit code that you didn't write. If you find code that you think is a good fit to add to xPike, file an issue and start a discussion before proceeding. DON'T submit PRs that alter licensing related files or headers. If you believe there's a problem with them, file an issue and we'll be happy to discuss it. DON'T add API additions without filing an issue and discussing with us first. Commit Messages Please format commit messages as follows (based on A Note About Git Commit Messages ): Summarize change in 50 characters or less Provide more detail after the first line. Leave one blank line below the summary and wrap all lines at 72 characters or less. If the change fixes an issue, leave another blank line after the final paragraph and indicate which issue is fixed in the specific format below. Fix #42 Do your best to factor commits appropriately, not too large with unrelated things in the same commit, and not too small with the same small change applied N times in N different commits. File Headers The following file header is the used for xPike. Please use it for new files. // This file is licensed under the MIT license. // See the LICENSE file in the project root for more information. Copying Files from Other Projects xPike uses some files from other projects, typically where a binary distribution does not exist or would be inconvenient. The following rules must be followed for PRs that include files from another project: The license of the file is permissive . Ideally, MIT. The license of the file is left in-tact. The contribution is correctly attributed in the 3rd party notices file in the repository, as needed. Porting Files from Other Projects There are many good algorithms implemented in other languages that would benefit the xPike project. The rules for porting a Java file to C# , for example, are the same as would be used for copying the same file, as described above. Clean-room implementations of existing algorithms that are not permissively licensed will generally not be accepted. If you want to create or nominate such an implementation, please create an issue to discuss the idea. C# Coding Style For non code files (xml, etc), our current best guidance is consistency. When editing files, keep new code and changes consistent with the style in the files. For new files, it should conform to the style for that component. If there is a completely new component, anything that is reasonably broadly accepted is fine. The general rule we follow is \"use Visual Studio defaults\". We use Allman style braces, where each brace begins on a new line. A single line statement block can go without braces but the block must be properly indented on its own line and must not be nested in other statement blocks that use braces. One exception is that a using statement is permitted to be nested within another using statement by starting on the following line at the same indentation level, even if the nested using contains a controlled block. We use four spaces of indentation (no tabs). We use camelCase for internal and private fields and use readonly where possible. Prefix internal and private static fields with _ . When used on static fields, readonly should come after static (e.g. static readonly not readonly static ). Public fields should be used sparingly and only if they are readonly . We use this. when necessary. We always specify the visibility, even if it's the default (e.g. private string foo not string foo ). This is to explicitly express intent. Visibility should be the first modifier (e.g. public abstract not abstract public ). Namespace imports should be specified at the top of the file, outside of namespace declarations, and should be sorted alphabetically, with the exception of System.* namespaces, which are to be placed on top of all others. Avoid more than one empty line at any time. For example, do not have two blank lines between members of a type. Avoid spurious free spaces. For example avoid if (someVar == 0)... , where the dots mark the spurious free spaces. Consider enabling \"View White Space (Ctrl+E, S)\" if using Visual Studio to aid detection. If a file happens to differ in style from these guidelines (e.g. private members are named m_member rather than member ), the existing style in that file takes precedence. We only use var when it's obvious what the variable type is (e.g. var stream = new FileStream(...) not var stream = OpenStandardInput() ). We use language keywords instead of BCL types (e.g. int, string, float instead of Int32, String, Single , etc) for both type references as well as method calls (e.g. int.Parse instead of Int32.Parse ). We use CAPITALIZED_SNAKE_CASING to name all our constant local variables and fields. The only exception is for interop code where the constant value should exactly match the name and value of the code you are calling via interop. We use nameof(...) instead of \"...\" whenever possible and relevant. Fields should be specified at the top within type declarations. When including non-ASCII characters in the source code use Unicode escape sequences (\\uXXXX) instead of literal characters. Literal non-ASCII characters occasionally get garbled by a tool or editor. All public members must have XML comments documentation. We use DocFX to generate the documentation, so you may use DocFX Markdown in the these comments. Undocumented public members will be rejected. An EditorConfig file ( .editorconfig ) has been provided at the root of the repository, enabling C# auto-formatting conforming to the above guidelines."
  },
  "api/settings/articles/intro.html": {
    "href": "api/settings/articles/intro.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Settings provides application settings management for the xPike paved-road. xPike Settings is the recommended source for application settings. It uses xPike Configuration as its configuration source by default, and other providers can be added. In addition, it adds a configurable layer of caching, as well as settings refresh capabilities. Settings Providers are fully DI-managed objects (unlike Configuration Providers). The use of Settings in xPike is analogous to IOptions in Asp.Net Core. Examples Working examples can be found on GitHub . Usage Define your Settings POCO using XPike.Settings; namespace MyLibrary { public class MySettings { public string CompanyName { get; set; } public IList<DateTime> UpcomingHolidays { get; set; } public IDictionary<string, string> LocationPhoneNumbers { get; set; } } } Load Automatically from JSON xPike supports a \"touchless\" settings system. Just inject ISettings<MySettings> wherever you want. xPike will search for a setting with a matching fully-qualified class name (eg \"MyLibrary.MySettings\" ). The settings will be deserialized from a JSON string. Note: This may vary by Provider. The value can come from any of the registered Configuration or Settings Providers. xPike Settings will handle caching and periodic refresh automatically. Specifying Options The built-in Settings Manager allows you to specify a custom configuration key. You can also specify an action to be called upon load to further customize your settings. container.RegisterSingleton<ISettingsManager<MySettings>>(provider => new SettingsManager(provider.ResolveDependency<ISettingsService>(), \"myCustomKey\", settings => { // further customization of settings object return settings; }); Custom Settings Manager For the most flexibility, you can specify your own Settings Manager. using XPike.Settings; namespace MyLibrary { public class MySettingsManager : SettingsManagerBase<MySettings> { protected override string ConfigurationKey => $\"{nameof(MyLibrary)}::{nameof(MySettings)}\"; public MySettingsManager(ISettingsService settingsService) : base(settingsService) { } public override ISettings<TSettings> GetSettings() { var settings = new MySettings { CompanyName = GetValue(\"CompanyName\"), UpcomingHolidays = GetValue<IList<DateTime>>(\"UpcomingHolidays\"), LocationPhoneNumbers = string.Split(new[] {','}, GetValueOrDefault(\"LocationPhoneNumbers\", \"555-1212\")) }; return new Settings(ConfigurationKey, settings); } } } Registering your Custom Settings Manager container.RegisterSingleton<ISettingsManager<MySettings>, MySettingsManager>(); Note: If you are using SimpleInjector for dependency injection, then you must be certain that any custom Settings Managers are registered before the Settings Package . Since a Package can load other Packages, this may require that you define them at the start of your top-level Package. Some things to note: The GetValue() and GetValueOrDefault() overloads on SettingsManager<TSettings> prepend the ConfigurationKey to the specified key . The default ConfigurationKey is the full class and namespace of the Settings POCO. In this example, the call to GetValue<IList<DateTime>>(...) loads its value from a JSON string in the MyLibrary.MySettings::UpcomingHolidays key. Packages XPike.Configuration Abstractions used by the rest of xPike. This package also contains the configuration providers: EnvironmentConfigurationProvider: Storing/retrieving configuration using environment variables. NullConfigurationProvider: A Configuration Provider that yields no values. Primarily intended for use in unit/integration tests. Xpike.Configuration.AWS Support for storing/retrieving configuration using AWS Simple Parameter Store and AWS Secrets Manager. XPike.Configuration.Azure Support for storing/retrieving configuration using Azure Application Configuration Service. Important Azure Application Configuration Service is in preview and Microsoft seems to be publishing breaking changes with each release. We don't recommend using this in production. We have provided support for experimentation and readiness for when Microsoft releases GA. Xpike.Configuration.Microsoft Provides configuration values to XPike by delegating lookups to the Microsoft.Extensions.Configuration.IConfiguration service. Xpike.Configuration.Microsoft.AspNetCore The inverse of Xpike.Configuration.Microsoft . This packages allows Microsoft.Extensions.Configuration.IConfiguration to use XPike.Configuration as a source. Xpike.Configuration.System Support for storing/retrieving configuration using System.Configuration--i.e. from App.Config and Web.Config."
  },
  "api/microsoft-extensions/api/index.html": {
    "href": "api/microsoft-extensions/api/index.html",
    "title": "| xPike",
    "keywords": "[!include[Introduction](../articles/intro.md)]"
  },
  "api/ioc/articles/intro.html": {
    "href": "api/ioc/articles/intro.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike IoC provides inversion of control and dependency injection abstractions and default implementations for the xPike paved-road. Packages XPike.IoC Abstractions used by the rest of xPike. Xpike.IoC.Owin Support for using xPike dependency injection in Owin applications. XPike.IoC.Microsoft An XPike.IoC provider implementation for Microsoft.Extensions.DependencyInjection. Xpike.IoC.SimpleInjector An XPike.IoC provider implementation for SimpleInjector."
  },
  "api/extensions/articles/using-msid-in-webapi.html": {
    "href": "api/extensions/articles/using-msid-in-webapi.html",
    "title": "Using Microsoft.Extensions.DependencyInjection in Asp.Net WebAPI | xPike",
    "keywords": "Using Microsoft.Extensions.DependencyInjection in Asp.Net WebAPI The XPike.Extensions.DependencyInjection.WebApi package provides integration of Microsoft.Extensions.DependencyInjection into legacy Asp.Net WebAPI application. Step 1 Install the XPike.Extensions.DependencyInjection.WebApi package: dotnet add package XPike.Extensions.DependencyInjection.WebApi or Install-Package XPike.Extensions.DependencyInjection.WebApi Step 2 Create an instance of Microsoft.Extensions.DependencyInjection.ServiceCollection and register your application's services. IServiceCollection services = new ServiceCollection(); services.AddServiceProviderVerification(); services.AddSingleton<ILogger, Logger>(); Step 3 Add the WebAPI controllers to the services collection. You can add them manually or use the extension method provided in XPike.Extensions.DependencyInjection.WebApi`. The advantage of the extension method is it looks at every assembly in the AppDomain for an ApiController and adds it to the service collection with a scoped lifetime for you. The method does use reflection to accomplish this. Depending on the number of assemblies and controllers in your application, you may want to consider adding your controllers explicitly in increase startup performance. services.AddApiControllers(); Step 4 Build and optionally verify the service provider. See Verifying the Container for more information on verifying the container and performance considerations when doing so. IServiceProvider provider = services.BuildServiceProvider(); provider.Verify(); Step 5 Lastly, tell WebAPI to use Microsoft.Extensions.DependencyInjection to resolve controllers and their dependencies. This is done by using the MicrosoftDependencyResolver found in XPike.Extensions.DependencyInjection.WebApi . GlobalConfiguration.Configuration.DependencyResolver = new MicrosoftDependencyResolver(provider); Completed Application_Start Method Global.asax.cs using Microsoft.Extensions.DependencyInjection; using XPike.Extensions.DependencyInjection.WebApi; ... public class WebApiApplication : System.Web.HttpApplication { protected void Application_Start() { GlobalConfiguration.Configure(WebApiConfig.Register); // Create a new service collection IServiceCollection services = new ServiceCollection(); services.AddServiceProviderVerification(); // Add your services services.AddSingleton<ILogger, Logger>(); // Add the WebApi controllers to the collection services.AddApiControllers(); // Create and verify the service provider IServiceProvider provider = services.BuildServiceProvider(); provider.Verify(); // Tell WebAPI it use Microsoft.Extensions.DependencyInjection // to resolve dependencies GlobalConfiguration.Configuration.DependencyResolver = new MicrosoftDependencyResolver(provider); // Resolve and start any background services... ILogger logger = provider.GetService<ILogger>(); logger.LogInfo(\"Service Started\"); } }"
  },
  "api/extensions/api/index.html": {
    "href": "api/extensions/api/index.html",
    "title": "Introduction | xPike",
    "keywords": "Introduction xPike Extensions provides features enhancements to Microsoft.Extensions. Packages XPike.Extensions.DependencyInjection The XPike.Extensions.DependencyInjection package add functionality to Microsoft's DI container ( Microsoft.Extensions.DependencyInjection ). These extensions can be used independent of the xPike paved-road and take no dependencies on other xPike packages. XPike.Extensions.DependencyInjection.WebApi The XPike.Extensions.WebApi package provides support for using Microsoft.Extensions.DependencyInjection in legacy ASP.Net WebAPI applications."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "xPike Guides and API Documentation | xPike",
    "keywords": "xPike Guides and API Documentation xPike Extensions xPike Extensions provides features enhancements to Microsoft.Extensions. These extensions can be used independent of the xPike paved-road and take no dependencies on other xPike packages. IoC - Dependency Injection Inversion of Control/Dependency Injection abstractions to support the rest of xPike. Configuration Provides a set of configuration libraries for managing application configuration. Settings Provides a set of libraries for managing application settings."
  },
  "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IServiceCollectionExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike IOC in Asp.Net Core. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.AspNetCore Assembly : XPike.IoC.Microsoft.AspNetCore.dll Syntax public static class IServiceCollectionExtensions Methods | Improve this Doc View Source AddXPikeDependencyInjection(IServiceCollection) Adds xPike dependency injection support. Declaration public static IDependencyCollection AddXPikeDependencyInjection(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IDependencyCollection IDependencyCollection."
  },
  "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IApplicationBuilderExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.IApplicationBuilderExtensions.html",
    "title": "Class IApplicationBuilderExtensions | xPike",
    "keywords": "Class IApplicationBuilderExtensions Extension methods for IApplicationBuilder to support xPike IoC in Asp.Net Core Inheritance System.Object IApplicationBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.AspNetCore Assembly : XPike.IoC.Microsoft.AspNetCore.dll Syntax public static class IApplicationBuilderExtensions Methods | Improve this Doc View Source UseXPikeDependencyInjection(IApplicationBuilder) Tells the application to use xPike dependency injection for resolution. Declaration public static IDependencyProvider UseXPikeDependencyInjection(this IApplicationBuilder app) Parameters Type Name Description IApplicationBuilder app The application builder instance. Returns Type Description IDependencyProvider IDependencyProvider. Exceptions Type Condition System.ArgumentNullException app - Extension methods require an instance."
  },
  "api/ioc/api/XPike.IoC.IDependencyProvider.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyProvider.html",
    "title": "Interface IDependencyProvider | xPike",
    "keywords": "Interface IDependencyProvider Interface implememented by all dependency injection providers for resolving services and their dependencies. Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public interface IDependencyProvider Methods | Improve this Doc View Source BeginScope() Creates a new scope for managing the lifetime of scoped instance registrations. Declaration IDisposable BeginScope() Returns Type Description System.IDisposable IDisposable Examples using(var scope = dependencyProvider.BeginScope()) { var foo = dependencyProvider.ResolveDependecy(typeof(IFoo)); } | Improve this Doc View Source ResolveDependencies<TService>() Resolves an enumerable of implementations for TService . Declaration IEnumerable<TService> ResolveDependencies<TService>() where TService : class Returns Type Description System.Collections.Generic.IEnumerable <TService> An enumerable of instances of TService . Type Parameters Name Description TService The service type to resolve. | Improve this Doc View Source ResolveDependency(Type) Resolves a dependency for the provided type. Declaration object ResolveDependency(Type serviceType) Parameters Type Name Description System.Type serviceType The service type to resolve. Returns Type Description System.Object An instance of serviceType . | Improve this Doc View Source ResolveDependency<TService>() Resolves a dependency for the provided type. Declaration TService ResolveDependency<TService>() where TService : class Returns Type Description TService An instance of TService . Type Parameters Name Description TService The service type to resolve. | Improve this Doc View Source Verify() Verifies the dependency graph for completeness. Declaration void Verify() Exceptions Type Condition DependencyVerificationException When verification fails. Extension Methods IDependencyProviderExtensions.GetContainer(IDependencyProvider)"
  },
  "api/ioc/api/XPike.IoC.IDependencyPackage.html": {
    "href": "api/ioc/api/XPike.IoC.IDependencyPackage.html",
    "title": "Interface IDependencyPackage | xPike",
    "keywords": "Interface IDependencyPackage Implemented by dependency packages Namespace : XPike.IoC Assembly : XPike.IoC.dll Syntax public interface IDependencyPackage Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Registers the package with the provided IDependencyCollection . Declaration void RegisterPackage(IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection The dependency collection in which to perform the registrations."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.MicrosoftDependencyResolver.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.MicrosoftDependencyResolver.html",
    "title": "Class MicrosoftDependencyResolver | xPike",
    "keywords": "Class MicrosoftDependencyResolver Class MicrosoftDependencyResolver. This class cannot be inherited. Implements the System.Web.Http.Dependencies.IDependencyResolver Inheritance System.Object MicrosoftDependencyResolver Implements System.Web.Http.Dependencies.IDependencyResolver System.Web.Http.Dependencies.IDependencyScope System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection.WebApi Assembly : XPike.Extensions.DependencyInjection.WebApi.dll Syntax public sealed class MicrosoftDependencyResolver : IDependencyResolver, IDependencyScope, IDisposable Constructors View Source MicrosoftDependencyResolver(IServiceProvider) Initializes a new instance of the MicrosoftDependencyResolver class. Declaration public MicrosoftDependencyResolver(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The service provider. Methods View Source BeginScope() Starts a resolution scope. Declaration public IDependencyScope BeginScope() Returns Type Description System.Web.Http.Dependencies.IDependencyScope The dependency scope. View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() View Source GetService(Type) Retrieves a service from the scope. Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType The service to be retrieved. Returns Type Description System.Object The retrieved service. View Source GetServices(Type) Retrieves a collection of services from the scope. Declaration public IEnumerable<object> GetServices(Type serviceType) Parameters Type Name Description System.Type serviceType The collection of services to be retrieved. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The retrieved collection of services. Implements System.Web.Http.Dependencies.IDependencyResolver System.Web.Http.Dependencies.IDependencyScope System.IDisposable See Also System.Web.Http.Dependencies.IDependencyResolver"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.IServiceCollectionExtensions.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support using Microsoft.Extensions.DependencyInjection in ASP.Net WebAPI. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection.WebApi Assembly : XPike.Extensions.DependencyInjection.WebApi.dll Syntax public static class IServiceCollectionExtensions Methods View Source AddApiControllers(IServiceCollection) Adds the API controllers to the service collection with a scoped lifetime. Declaration public static IServiceCollection AddApiControllers(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services The services. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection IServiceCollection."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.VerificationResult.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.VerificationResult.html",
    "title": "Class VerificationResult | xPike",
    "keywords": "Class VerificationResult Encapsulates the result of a failed attempt to verify a registered type in the container. Inheritance System.Object VerificationResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public class VerificationResult Constructors View Source VerificationResult(ServiceDescriptor, Exception, String) Initializes a new instance of the VerificationResult class. Declaration public VerificationResult(ServiceDescriptor descriptor, Exception exception = null, string message = null) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.ServiceDescriptor descriptor The ServiceDescriptor being verified. System.Exception exception The exception thrown, if any. System.String message The verification message. Exceptions Type Condition System.ArgumentNullException descriptor Properties View Source Exception Gets the exception that caused the verification to fail. Declaration public Exception Exception { get; } Property Value Type Description System.Exception The exception. View Source Message Gets the verification message. Declaration public string Message { get; } Property Value Type Description System.String The message."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.ServiceProviderVerificationException.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.ServiceProviderVerificationException.html",
    "title": "Class ServiceProviderVerificationException | xPike",
    "keywords": "Class ServiceProviderVerificationException A ServiceProviderVerificationException is thrown when the container fails to verify. Inheritance System.Object System.Exception ServiceProviderVerificationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax [Serializable] public class ServiceProviderVerificationException : Exception, ISerializable, _Exception Constructors View Source ServiceProviderVerificationException(IEnumerable<VerificationResult>) Initializes a new instance of the ServiceProviderVerificationException class. Declaration public ServiceProviderVerificationException(IEnumerable<VerificationResult> results) Parameters Type Name Description System.Collections.Generic.IEnumerable < VerificationResult > results The exceptions. View Source ServiceProviderVerificationException(SerializationInfo, StreamingContext) Initializes a new instance of the ServiceProviderVerificationException class. Declaration protected ServiceProviderVerificationException(SerializationInfo serializationInfo, StreamingContext streamingContext) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo serializationInfo The serialization information. System.Runtime.Serialization.StreamingContext streamingContext The streaming context. Exceptions Type Condition System.NotImplementedException Properties View Source Restults Gets a list of VerificationResult s that occurred during verification. Declaration public IEnumerable<VerificationResult> Restults { get; } Property Value Type Description System.Collections.Generic.IEnumerable < VerificationResult > An array of exceptions. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also System.Exception"
  },
  "api/configuration/api/XPike.Configuration.html": {
    "href": "api/configuration/api/XPike.Configuration.html",
    "title": "Namespace XPike.Configuration | xPike",
    "keywords": "Namespace XPike.Configuration Classes Config<TConfig> ConfigLoader<TConfig> ConfigManager<TConfig> ConfigurationProviderBase Abstract implementation of a Configuration Provider, to simplify the creation of new Providers. In particular, adds proper exceptions when requesting \"required\" values using GetValue(), as well as intrinsic datatype conversion and JSON deserialization support. To create a new Provider, simply override this class and implement the GetValueOrDefault() method. ConfigurationService ConfigurationServiceBase<TProvider> Abstract base implementation of a Configuration Service. This is effectively a complete implementation, however. It is abstracted away because Configuration Service works identically to Settings Service, except for which type of Provider it uses. This is very convenient since the Configuration Service and Settings Service share a common interface, as do Configuration Provider and Settings Provider. To create a new Configuration Service, just inherit this class and specify the desired type of TProvider. DefaultConfigManager<TConfig> IDependencyCollectionExtensions InvalidConfigurationException Represents an exception resulting from a failure to load a value from Configuration. This could be from a missing key, a failed conversion, or any other error in the underlying Provider. Also used by XPike.Settings in identical scenarios. Package XPike Configuration Package Singleton Registrations: IEnvironmentConfigurationProvider => EnvironmentConfigurationProvider INullConfigurationProvider => NullConfigurationProvider IConfigurationService => ConfigurationService IMemoryConfigurationProvider => MemoryConfigurationProvider (when specified, see note below) Collection Registrations: IConfigurationProvider += EnvironmentConfigurationProvider IConfigurationProvider += MemoryConfigurationProvider (when specified, see note below) NOTE: If the Package is instantiated by passing in a Dictionary<string, string>, these will be used as development-time defaults. Values in other registered Providers (Environment Configuration Provider is added by default) will override these. XPikeConfigBuilder Interfaces IConfig<TConfig> IConfigLoader<TConfig> IConfigManager<TConfig> IConfigurationLoader Defines a Configuration Loader. A Configuration Loader is a Configuration Provider that can load its settings in bulk. This is necessary for compatibility with ASP.NET Core's IConfiguration and IOptions. Providers that do not implement this interface will not work with either of those paradigms. XPike Configuration and XPike Settings are fully compatible with Providers that do not implement this interface, however. IConfigurationProvider Defines a Configuration Provider, the most-granular source of configuration values in XPike. These are the basis of all of the functionality in XPike.Configuration and XPike.Settings. IConfigurationService Represents a Configuration Service, which is the \"end-user-facing consumable\" from this Package. This is what you should use to retrieve configuration values in most cases. The Configuration Service is also expected to aggregate a Bulk Load of values from Providers that support it. This parallels (and is inter-operable with) the IConfiguration service in ASP.NET Core. See the XPike.Configuration.Microsoft.AspNetCore package for details. IXPikeConfigBuilder Orchestrates the construction of an XPike Configuration Service."
  },
  "api/configuration/api/XPike.Configuration.System.ISystemConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.System.ISystemConfigurationProvider.html",
    "title": "Interface ISystemConfigurationProvider | xPike",
    "keywords": "Interface ISystemConfigurationProvider Defines a Configuration Provider that retrieves its values from app.config / web.config. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) Namespace : XPike.Configuration.System Assembly : XPike.Configuration.System.dll Syntax public interface ISystemConfigurationProvider : IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.Package.html": {
    "href": "api/configuration/api/XPike.Configuration.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package XPike Configuration Package Singleton Registrations: IEnvironmentConfigurationProvider => EnvironmentConfigurationProvider INullConfigurationProvider => NullConfigurationProvider IConfigurationService => ConfigurationService IMemoryConfigurationProvider => MemoryConfigurationProvider (when specified, see note below) Collection Registrations: IConfigurationProvider += EnvironmentConfigurationProvider IConfigurationProvider += MemoryConfigurationProvider (when specified, see note below) NOTE: If the Package is instantiated by passing in a Dictionary<string, string>, these will be used as development-time defaults. Values in other registered Providers (Environment Configuration Provider is added by default) will override these. Inheritance System.Object Package Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class Package : IDependencyPackage Constructors | Improve this Doc View Source Package() Declaration public Package() | Improve this Doc View Source Package(IDictionary<String, String>) Declaration public Package(IDictionary<string, string> configuration) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > configuration Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection"
  },
  "api/configuration/api/XPike.Configuration.Null.html": {
    "href": "api/configuration/api/XPike.Configuration.Null.html",
    "title": "Namespace XPike.Configuration.Null | xPike",
    "keywords": "Namespace XPike.Configuration.Null Classes NullConfigurationProvider A Configuration Provider that yields no values. Primarily intended for use in unit/integration tests. Interfaces INullConfigurationProvider This interface represents a Configuration Provider that yields no values."
  },
  "api/configuration/api/XPike.Configuration.Null.NullConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Null.NullConfigurationProvider.html",
    "title": "Class NullConfigurationProvider | xPike",
    "keywords": "Class NullConfigurationProvider A Configuration Provider that yields no values. Primarily intended for use in unit/integration tests. Inheritance System.Object ConfigurationProviderBase NullConfigurationProvider Implements INullConfigurationProvider IConfigurationProvider IConfigurationLoader Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Null Assembly : XPike.Configuration.dll Syntax public class NullConfigurationProvider : ConfigurationProviderBase, INullConfigurationProvider, IConfigurationProvider, IConfigurationLoader Methods | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) | Improve this Doc View Source Load() Declaration public IDictionary<string, string> Load() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements INullConfigurationProvider IConfigurationProvider IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.IMicrosoftConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.IMicrosoftConfigurationProvider.html",
    "title": "Interface IMicrosoftConfigurationProvider | xPike",
    "keywords": "Interface IMicrosoftConfigurationProvider Represents a Configuration Provider that gets its settings from the Microsoft.Extensions.Configuration.IConfiguration service. Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) Namespace : XPike.Configuration.Microsoft Assembly : XPike.Configuration.Microsoft.dll Syntax public interface IMicrosoftConfigurationProvider : IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.html",
    "title": "Namespace XPike.Configuration.Microsoft.AspNetCore | xPike",
    "keywords": "Namespace XPike.Configuration.Microsoft.AspNetCore Classes IConfigurationBuilderExtensions IServiceCollectionExtensions IWebHostBuilderExtensions Package XPike Configuration - Configuration Source for Microsoft.Extensions.Configuration NOTE: Loading this package should not be necessary. It's here merely for consistency. Package Dependencies: XPike.Configuration Singleton Registrations: IXPikeConfigurationSource => XPikeConfigurationSource XPikeConfigurationSource Interfaces IXPikeConfigurationSource Represents a Configuration Source for Microsoft.Extensions.Configuration which retrieves its values from XPike Configuration."
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IXPikeConfigurationSource.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IXPikeConfigurationSource.html",
    "title": "Interface IXPikeConfigurationSource | xPike",
    "keywords": "Interface IXPikeConfigurationSource Represents a Configuration Source for Microsoft.Extensions.Configuration which retrieves its values from XPike Configuration. Namespace : XPike.Configuration.Microsoft.AspNetCore Assembly : XPike.Configuration.Microsoft.AspNetCore.dll Syntax public interface IXPikeConfigurationSource : IConfigurationSource, Extensions.Configuration.IConfigurationProvider"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IWebHostBuilderExtensions.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IWebHostBuilderExtensions.html",
    "title": "Class IWebHostBuilderExtensions | xPike",
    "keywords": "Class IWebHostBuilderExtensions Inheritance System.Object IWebHostBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Microsoft.AspNetCore Assembly : XPike.Configuration.Microsoft.AspNetCore.dll Syntax public static class IWebHostBuilderExtensions Methods | Improve this Doc View Source AddXPikeConfiguration(IWebHostBuilder, Action<IXPikeConfigBuilder>) Declaration public static IWebHostBuilder AddXPikeConfiguration(this IWebHostBuilder hostBuilder, Action<IXPikeConfigBuilder> configBuilderSetup) Parameters Type Name Description IWebHostBuilder hostBuilder System.Action < IXPikeConfigBuilder > configBuilderSetup Returns Type Description IWebHostBuilder"
  },
  "api/configuration/api/XPike.Configuration.Memory.html": {
    "href": "api/configuration/api/XPike.Configuration.Memory.html",
    "title": "Namespace XPike.Configuration.Memory | xPike",
    "keywords": "Namespace XPike.Configuration.Memory Classes MemoryConfigurationProvider Holds a collection of key-value pairs in memory to be used as configuration settings. Intended primarily for use in unit/integration tests. Because this class requires a Dictionary to be passed into the constructor, in order to inject it into DI, it will need to be registered using: container.AddSingleton<IConfigurationProvider>(new MemoryConfigurationProvider(dictionary)); Interfaces IMemoryConfigurationProvider This interface represents a Configuration Provider that stores hard-coded settings in memory (such as a Dictionary<string, string>)."
  },
  "api/configuration/api/XPike.Configuration.Memory.MemoryConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Memory.MemoryConfigurationProvider.html",
    "title": "Class MemoryConfigurationProvider | xPike",
    "keywords": "Class MemoryConfigurationProvider Holds a collection of key-value pairs in memory to be used as configuration settings. Intended primarily for use in unit/integration tests. Because this class requires a Dictionary to be passed into the constructor, in order to inject it into DI, it will need to be registered using: container.AddSingleton<IConfigurationProvider>(new MemoryConfigurationProvider(dictionary)); Inheritance System.Object ConfigurationProviderBase MemoryConfigurationProvider Implements IMemoryConfigurationProvider IConfigurationProvider IConfigurationLoader Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Memory Assembly : XPike.Configuration.dll Syntax public class MemoryConfigurationProvider : ConfigurationProviderBase, IMemoryConfigurationProvider, IConfigurationProvider, IConfigurationLoader Constructors | Improve this Doc View Source MemoryConfigurationProvider(IDictionary<String, String>) Declaration public MemoryConfigurationProvider(IDictionary<string, string> configuration) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > configuration Methods | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) | Improve this Doc View Source Load() Declaration public IDictionary<string, string> Load() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements IMemoryConfigurationProvider IConfigurationProvider IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.InvalidConfigurationException.html": {
    "href": "api/configuration/api/XPike.Configuration.InvalidConfigurationException.html",
    "title": "Class InvalidConfigurationException | xPike",
    "keywords": "Class InvalidConfigurationException Represents an exception resulting from a failure to load a value from Configuration. This could be from a missing key, a failed conversion, or any other error in the underlying Provider. Also used by XPike.Settings in identical scenarios. Inheritance System.Object System.Exception InvalidConfigurationException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class InvalidConfigurationException : Exception, ISerializable, _Exception Constructors | Improve this Doc View Source InvalidConfigurationException(String) Creates a new Invalid Configuration Exception resulting from a Missing Key. Declaration public InvalidConfigurationException(string configurationKey) Parameters Type Name Description System.String configurationKey | Improve this Doc View Source InvalidConfigurationException(String, Exception) Creates a new Invalid Configuration Exception which wraps an underlying Exception. It is expected that the wrapped Exception will provide further clarification as to the nature of the failure. Declaration public InvalidConfigurationException(string configurationKey, Exception ex) Parameters Type Name Description System.String configurationKey System.Exception ex | Improve this Doc View Source InvalidConfigurationException(String, String) Creates a new Invalid Configuration Exception resulting from an error (such as a failed type conversion), but NOT from a missing key - along with a message describing the failure. Declaration public InvalidConfigurationException(string configurationKey, string message) Parameters Type Name Description System.String configurationKey System.String message Properties | Improve this Doc View Source ConfigurationKey The Configuration Key that was requested which resulted in an error. Declaration public string ConfigurationKey { get; } Property Value Type Description System.String Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/configuration/api/XPike.Configuration.IDependencyCollectionExtensions.html": {
    "href": "api/configuration/api/XPike.Configuration.IDependencyCollectionExtensions.html",
    "title": "Class IDependencyCollectionExtensions | xPike",
    "keywords": "Class IDependencyCollectionExtensions Inheritance System.Object IDependencyCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public static class IDependencyCollectionExtensions Methods | Improve this Doc View Source AddXPikeConfiguration(IDependencyCollection, Action<IXPikeConfigBuilder>) Declaration public static IDependencyCollection AddXPikeConfiguration(this IDependencyCollection dependencyCollection, Action<IXPikeConfigBuilder> configBuilderSetup) Parameters Type Name Description IDependencyCollection dependencyCollection System.Action < IXPikeConfigBuilder > configBuilderSetup Returns Type Description IDependencyCollection"
  },
  "api/configuration/api/XPike.Configuration.IConfigurationLoader.html": {
    "href": "api/configuration/api/XPike.Configuration.IConfigurationLoader.html",
    "title": "Interface IConfigurationLoader | xPike",
    "keywords": "Interface IConfigurationLoader Defines a Configuration Loader. A Configuration Loader is a Configuration Provider that can load its settings in bulk. This is necessary for compatibility with ASP.NET Core's IConfiguration and IOptions. Providers that do not implement this interface will not work with either of those paradigms. XPike Configuration and XPike Settings are fully compatible with Providers that do not implement this interface, however. Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IConfigurationLoader Methods | Improve this Doc View Source Load() Retrieves all key-value pairs that are available from this Provider. Declaration IDictionary<string, string> Load() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String >"
  },
  "api/configuration/api/XPike.Configuration.IConfigManager-1.html": {
    "href": "api/configuration/api/XPike.Configuration.IConfigManager-1.html",
    "title": "Interface IConfigManager<TConfig> | xPike",
    "keywords": "Interface IConfigManager<TConfig> Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IConfigManager<TConfig> where TConfig : class Type Parameters Name Description TConfig Methods | Improve this Doc View Source GetConfig() Declaration IConfig<TConfig> GetConfig() Returns Type Description IConfig <TConfig> | Improve this Doc View Source GetConfigOrDefault(TConfig) Declaration IConfig<TConfig> GetConfigOrDefault(TConfig defaultValue) Parameters Type Name Description TConfig defaultValue Returns Type Description IConfig <TConfig> | Improve this Doc View Source GetValue() Declaration TConfig GetValue() Returns Type Description TConfig"
  },
  "api/configuration/api/XPike.Configuration.Environment.html": {
    "href": "api/configuration/api/XPike.Configuration.Environment.html",
    "title": "Namespace XPike.Configuration.Environment | xPike",
    "keywords": "Namespace XPike.Configuration.Environment Classes EnvironmentConfigurationProvider Provides configuration values from environment variables. Uses System.Environment.GetEnvironmentVariable. Requested configuration keys will have all occurrences of \":\" replaced with \"_\". In other words, to set the value for \"MyLibrary::MySetting\", you would set the \"MyLibrary__MySetting\" environment variable. Interfaces IEnvironmentConfigurationProvider This interface represents a Configuration Providers that retrieves its value from System Environment Variables."
  },
  "api/configuration/api/XPike.Configuration.AWS.AWSConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.AWS.AWSConfigurationProvider.html",
    "title": "Class AWSConfigurationProvider | xPike",
    "keywords": "Class AWSConfigurationProvider Retrieves Configuration values from the Azure App Configuration Service. This is done using the cross-platform-compatible Azure Client SDK. This implementation does not provide any of the advanced feature set such as Configuration Builders, that the ASP.NET Core and .NET Framework variants offer. Since this constructor requires a Connection String to be passed in, it must be registered using: container.AddSingleton<IConfigurationProvider>(new AzureConfigurationProvider(connectionString)); Inheritance System.Object ConfigurationProviderBase AWSConfigurationProvider Implements IAWSConfigurationProvider IConfigurationProvider Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.AWS Assembly : XPike.Configuration.AWS.dll Syntax public class AWSConfigurationProvider : ConfigurationProviderBase, IAWSConfigurationProvider, IConfigurationProvider Constructors | Improve this Doc View Source AWSConfigurationProvider() Declaration public AWSConfigurationProvider() Methods | Improve this Doc View Source GetValueOrDefault(String, String) TODO: Make this async, so we don't have to use .GetAwaiter().GetResult(). Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) Implements IAWSConfigurationProvider IConfigurationProvider"
  },
  "api/configuration/api/Example.Library.html": {
    "href": "api/configuration/api/Example.Library.html",
    "title": "Namespace Example.Library | xPike",
    "keywords": "Namespace Example.Library Classes AnotherConfig SomeConfig"
  },
  "api/configuration/api/Example.Library.AnotherConfig.html": {
    "href": "api/configuration/api/Example.Library.AnotherConfig.html",
    "title": "Class AnotherConfig | xPike",
    "keywords": "Class AnotherConfig Inheritance System.Object AnotherConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Example.Library Assembly : Example.Library.dll Syntax public class AnotherConfig Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/settings/api/XPike.Settings.Providers.ISettingsProvider.html": {
    "href": "api/settings/api/XPike.Settings.Providers.ISettingsProvider.html",
    "title": "Interface ISettingsProvider | xPike",
    "keywords": "Interface ISettingsProvider Defines an XPike Settings Provider, which shares a signature with the Configuration Service by implementing the same IConfigurationProvider and IConfigurationLoader interfaces. Namespace : XPike.Settings.Providers Assembly : XPike.Settings.dll Syntax public interface ISettingsProvider : IConfigurationProvider, IConfigurationLoader"
  },
  "api/settings/api/XPike.Settings.Providers.Configuration.html": {
    "href": "api/settings/api/XPike.Settings.Providers.Configuration.html",
    "title": "Namespace XPike.Settings.Providers.Configuration | xPike",
    "keywords": "Namespace XPike.Settings.Providers.Configuration Classes ConfigurationSettingsProvider Settings Provider which retrieves its values from XPike Configuration through the IConfigurationService. Interfaces IConfigurationSettingsProvider Defines a Settings Provider which retrieves its values from service configuration data."
  },
  "api/settings/api/XPike.Settings.Providers.Configuration.IConfigurationSettingsProvider.html": {
    "href": "api/settings/api/XPike.Settings.Providers.Configuration.IConfigurationSettingsProvider.html",
    "title": "Interface IConfigurationSettingsProvider | xPike",
    "keywords": "Interface IConfigurationSettingsProvider Defines a Settings Provider which retrieves its values from service configuration data. Namespace : XPike.Settings.Providers.Configuration Assembly : XPike.Settings.dll Syntax public interface IConfigurationSettingsProvider : ISettingsProvider, IConfigurationProvider, IConfigurationLoader"
  },
  "api/settings/api/XPike.Settings.Providers.Configuration.ConfigurationSettingsProvider.html": {
    "href": "api/settings/api/XPike.Settings.Providers.Configuration.ConfigurationSettingsProvider.html",
    "title": "Class ConfigurationSettingsProvider | xPike",
    "keywords": "Class ConfigurationSettingsProvider Settings Provider which retrieves its values from XPike Configuration through the IConfigurationService. Inheritance System.Object ConfigurationSettingsProvider Implements IConfigurationSettingsProvider ISettingsProvider IConfigurationProvider IConfigurationLoader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Settings.Providers.Configuration Assembly : XPike.Settings.dll Syntax public class ConfigurationSettingsProvider : IConfigurationSettingsProvider, ISettingsProvider, IConfigurationProvider, IConfigurationLoader Constructors | Improve this Doc View Source ConfigurationSettingsProvider(IConfigurationService) Declaration public ConfigurationSettingsProvider(IConfigurationService configurationService) Parameters Type Name Description IConfigurationService configurationService Methods | Improve this Doc View Source GetValue(String) Declaration public string GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetValue<T>(String) Declaration public T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String | Improve this Doc View Source GetValueOrDefault<T>(String, T) Declaration public T GetValueOrDefault<T>(string key, T defaultValue = null) Parameters Type Name Description System.String key T defaultValue Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source Load() Declaration public IDictionary<string, string> Load() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements IConfigurationSettingsProvider ISettingsProvider IConfigurationProvider IConfigurationLoader"
  },
  "api/settings/api/XPike.Settings.Package.html": {
    "href": "api/settings/api/XPike.Settings.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package Inheritance System.Object Package Namespace : XPike.Settings Assembly : XPike.Settings.dll Syntax public class Package : IDependencyPackage Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection dependencies) Parameters Type Name Description IDependencyCollection dependencies"
  },
  "api/settings/api/XPike.Settings.Managers.html": {
    "href": "api/settings/api/XPike.Settings.Managers.html",
    "title": "Namespace XPike.Settings.Managers | xPike",
    "keywords": "Namespace XPike.Settings.Managers Classes SettingsLoader<TSettings> Interfaces ISettingsLoader<TSettings> Defines a Settings Loader, which is responsible for retrieving a class of strongly-typed settings. This implements ISettings for simplicity - the Loader is what is actually injected when ISettings is requested. It is responsible for both retrieving the settings as well as acting as a proxy to that retrieved object."
  },
  "api/settings/api/XPike.Settings.Managers.SettingsLoader-1.html": {
    "href": "api/settings/api/XPike.Settings.Managers.SettingsLoader-1.html",
    "title": "Class SettingsLoader<TSettings> | xPike",
    "keywords": "Class SettingsLoader<TSettings> Inheritance System.Object SettingsLoader<TSettings> Implements ISettingsLoader <TSettings> ISettings <TSettings> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Settings.Managers Assembly : XPike.Settings.dll Syntax public class SettingsLoader<TSettings> : ISettingsLoader<TSettings>, ISettings<TSettings> where TSettings : class Type Parameters Name Description TSettings Constructors | Improve this Doc View Source SettingsLoader(ISettingsManager<TSettings>) Declaration public SettingsLoader(ISettingsManager<TSettings> settingsManager) Parameters Type Name Description ISettingsManager <TSettings> settingsManager Properties | Improve this Doc View Source ConfigurationKey Declaration public string ConfigurationKey { get; } Property Value Type Description System.String | Improve this Doc View Source LastRetrievedUtc Declaration public DateTime LastRetrievedUtc { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Value Declaration public TSettings Value { get; } Property Value Type Description TSettings Implements ISettingsLoader<TSettings> ISettings<TSettings>"
  },
  "api/settings/api/XPike.Settings.Managers.ISettingsLoader-1.html": {
    "href": "api/settings/api/XPike.Settings.Managers.ISettingsLoader-1.html",
    "title": "Interface ISettingsLoader<TSettings> | xPike",
    "keywords": "Interface ISettingsLoader<TSettings> Defines a Settings Loader, which is responsible for retrieving a class of strongly-typed settings. This implements ISettings for simplicity - the Loader is what is actually injected when ISettings is requested. It is responsible for both retrieving the settings as well as acting as a proxy to that retrieved object. Inherited Members ISettings<TSettings>.ConfigurationKey ISettings<TSettings>.Value ISettings<TSettings>.LastRetrievedUtc Namespace : XPike.Settings.Managers Assembly : XPike.Settings.dll Syntax public interface ISettingsLoader<TSettings> : ISettings<TSettings> where TSettings : class Type Parameters Name Description TSettings"
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.html",
    "title": "Namespace XPike.Extensions.DependencyInjection | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection Classes IServiceCollectionExtensions Extension methods for IServiceCollection. IServiceProviderExtensions Extension methods for IServiceProvider, to enhance the features and functionality of Microsoft.Extensions.DependencyInjection. ServiceProviderVerificationException A ServiceProviderVerificationException is thrown when the container fails to verify. VerificationResult Encapsulates the result of a failed attempt to verify a registered type in the container."
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.WebApi.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.WebApi.html",
    "title": "Namespace XPike.Extensions.DependencyInjection.WebApi | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection.WebApi Classes IServiceCollectionExtensions Extension methods for IServiceCollection to support using Microsoft.Extensions.DependencyInjection in ASP.Net WebAPI. MicrosoftDependencyResolver Class MicrosoftDependencyResolver. This class cannot be inherited. Implements the System.Web.Http.Dependencies.IDependencyResolver"
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.WebApi.MicrosoftDependencyResolver.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.WebApi.MicrosoftDependencyResolver.html",
    "title": "Class MicrosoftDependencyResolver | xPike",
    "keywords": "Class MicrosoftDependencyResolver Class MicrosoftDependencyResolver. This class cannot be inherited. Implements the Inheritance System.Object MicrosoftDependencyResolver Namespace : XPike.Extensions.DependencyInjection.WebApi Assembly : XPike.Extensions.DependencyInjection.WebApi.dll Syntax public sealed class MicrosoftDependencyResolver : IDependencyResolver Constructors | Improve this Doc View Source MicrosoftDependencyResolver(IServiceProvider) Initializes a new instance of the MicrosoftDependencyResolver class. Declaration public MicrosoftDependencyResolver(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider The service provider. Methods | Improve this Doc View Source BeginScope() Starts a resolution scope. Declaration public IDependencyScope BeginScope() Returns Type Description IDependencyScope The dependency scope. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source GetService(Type) Retrieves a service from the scope. Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType The service to be retrieved. Returns Type Description System.Object The retrieved service. | Improve this Doc View Source GetServices(Type) Retrieves a collection of services from the scope. Declaration public IEnumerable<object> GetServices(Type serviceType) Parameters Type Name Description System.Type serviceType The collection of services to be retrieved. Returns Type Description System.Collections.Generic.IEnumerable < System.Object > The retrieved collection of services."
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.WebApi.IServiceCollectionExtensions.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.WebApi.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection to support using Microsoft.Extensions.DependencyInjection in ASP.Net WebAPI. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection.WebApi Assembly : XPike.Extensions.DependencyInjection.WebApi.dll Syntax public static class IServiceCollectionExtensions Methods | Improve this Doc View Source AddApiControllers(IServiceCollection) Adds the API controllers to the service collection with a scoped lifetime. Declaration public static IServiceCollection AddApiControllers(this IServiceCollection services) Parameters Type Name Description IServiceCollection services The services. Returns Type Description IServiceCollection IServiceCollection."
  },
  "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.VerificationResult.html": {
    "href": "api/microsoft-extensions/api/XPike.Extensions.DependencyInjection.VerificationResult.html",
    "title": "Class VerificationResult | xPike",
    "keywords": "Class VerificationResult Encapsulates the result of a failed attempt to verify a registered type in the container. Inheritance System.Object VerificationResult Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax [Serializable] public class VerificationResult Constructors | Improve this Doc View Source VerificationResult(ServiceDescriptor, Exception, String) Initializes a new instance of the VerificationResult class. Declaration public VerificationResult(ServiceDescriptor descriptor, Exception exception = null, string message = null) Parameters Type Name Description ServiceDescriptor descriptor The ServiceDescriptor being verified. System.Exception exception The exception thrown, if any. System.String message The verification message. Exceptions Type Condition System.ArgumentNullException descriptor Properties | Improve this Doc View Source Exception Gets the exception that caused the verification to fail. Declaration public Exception Exception { get; } Property Value Type Description System.Exception The exception. | Improve this Doc View Source Message Gets the verification message. Declaration public string Message { get; } Property Value Type Description System.String The message."
  },
  "api/ioc/api/XPike.IoC.Microsoft.WebApi.HttpConfigurationExtensions.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.WebApi.HttpConfigurationExtensions.html",
    "title": "Class HttpConfigurationExtensions | xPike",
    "keywords": "Class HttpConfigurationExtensions Extension methods for HttpConfiguration to support configuring SimpleInjector with xPike in ASP.Net WebAPI. Inheritance System.Object HttpConfigurationExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft.WebApi Assembly : XPike.IoC.Microsoft.WebApi.dll Syntax public static class HttpConfigurationExtensions Methods | Improve this Doc View Source UseXPikeDependencyInjection(HttpConfiguration, IDependencyProvider) Uses the xPike dependency injection for resolving dependencies. Declaration public static HttpConfiguration UseXPikeDependencyInjection(this HttpConfiguration config, IDependencyProvider dependencyProvider) Parameters Type Name Description HttpConfiguration config The configuration. IDependencyProvider dependencyProvider The dependency provider. Returns Type Description HttpConfiguration HttpConfiguration"
  },
  "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyProvider.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyProvider.html",
    "title": "Class MicrosoftDependencyProvider | xPike",
    "keywords": "Class MicrosoftDependencyProvider Inheritance System.Object MicrosoftDependencyProvider Implements IDependencyProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft Assembly : XPike.IoC.Microsoft.dll Syntax public class MicrosoftDependencyProvider : IDependencyProvider Constructors | Improve this Doc View Source MicrosoftDependencyProvider(IServiceProvider) Declaration public MicrosoftDependencyProvider(IServiceProvider serviceProvider) Parameters Type Name Description System.IServiceProvider serviceProvider Properties | Improve this Doc View Source ServiceProvider Declaration public IServiceProvider ServiceProvider { get; } Property Value Type Description System.IServiceProvider Methods | Improve this Doc View Source BeginScope() Declaration public IDisposable BeginScope() Returns Type Description System.IDisposable | Improve this Doc View Source ResolveDependencies<TService>() Declaration public IEnumerable<TService> ResolveDependencies<TService>() where TService : class Returns Type Description System.Collections.Generic.IEnumerable <TService> Type Parameters Name Description TService | Improve this Doc View Source ResolveDependency(Type) Declaration public object ResolveDependency(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object | Improve this Doc View Source ResolveDependency<TService>() Declaration public TService ResolveDependency<TService>() where TService : class Returns Type Description TService Type Parameters Name Description TService | Improve this Doc View Source Verify() Verifies the dependency graph for completeness. Declaration public void Verify() Exceptions Type Condition DependencyVerificationException When verification fails. Implements IDependencyProvider Extension Methods IDependencyProviderExtensions.GetContainer(IDependencyProvider)"
  },
  "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyCollection.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.MicrosoftDependencyCollection.html",
    "title": "Class MicrosoftDependencyCollection | xPike",
    "keywords": "Class MicrosoftDependencyCollection Inheritance System.Object MicrosoftDependencyCollection Implements IDependencyCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.IoC.Microsoft Assembly : XPike.IoC.Microsoft.dll Syntax public class MicrosoftDependencyCollection : IDependencyCollection Constructors | Improve this Doc View Source MicrosoftDependencyCollection(IServiceCollection) Declaration public MicrosoftDependencyCollection(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection Properties | Improve this Doc View Source ServiceCollection Declaration public IServiceCollection ServiceCollection { get; } Property Value Type Description IServiceCollection Methods | Improve this Doc View Source AddSingletonToCollection(Type, Type) Declaration public void AddSingletonToCollection(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source AddSingletonToCollection<TService>(TService) Declaration public void AddSingletonToCollection<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService | Improve this Doc View Source AddSingletonToCollection<TService, TImplementation>() Declaration public void AddSingletonToCollection<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService>) Declaration public void AddSingletonToCollection<TService, TImplementation>(Func<IDependencyProvider, TService> implementationFactory) where TService : class where TImplementation : class, TService Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService TImplementation | Improve this Doc View Source BuildDependencyProvider(Boolean) Declaration public IDependencyProvider BuildDependencyProvider(bool verifyOnBuild = true) Parameters Type Name Description System.Boolean verifyOnBuild Returns Type Description IDependencyProvider | Improve this Doc View Source RegisterScoped(Type, Type) Declaration public void RegisterScoped(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterScoped<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterScoped<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService | Improve this Doc View Source RegisterScoped<TService, TImplementation>() Declaration public void RegisterScoped<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source RegisterSingleton(Type, Type) Declaration public void RegisterSingleton(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterSingleton<TService>(TService) Declaration public void RegisterSingleton<TService>(TService instance) where TService : class Parameters Type Name Description TService instance Type Parameters Name Description TService | Improve this Doc View Source RegisterSingleton<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterSingleton<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService | Improve this Doc View Source RegisterSingleton<TService, TImplementation>() Declaration public void RegisterSingleton<TService, TImplementation>() where TService : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source RegisterSingletonFallback(Type, Type) Declaration public void RegisterSingletonFallback(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterTransient(Type, Type) Declaration public void RegisterTransient(Type genericInterface, Type genericImplementation) Parameters Type Name Description System.Type genericInterface System.Type genericImplementation | Improve this Doc View Source RegisterTransient<TService>(Func<IDependencyProvider, TService>) Declaration public void RegisterTransient<TService>(Func<IDependencyProvider, TService> implementationFactory) where TService : class Parameters Type Name Description System.Func < IDependencyProvider , TService> implementationFactory Type Parameters Name Description TService | Improve this Doc View Source RegisterTransient<TService, TImplementation>() Declaration public void RegisterTransient<TService, TImplementation>() where TService : class where TImplementation : class Type Parameters Name Description TService TImplementation | Improve this Doc View Source RemoveSingleton<TService, TImplementation>() Declaration public void RemoveSingleton<TService, TImplementation>() Type Parameters Name Description TService TImplementation | Improve this Doc View Source ResetCollection<TService>() Declaration public void ResetCollection<TService>() Type Parameters Name Description TService Implements IDependencyCollection Extension Methods IDependencyCollectionExtensions.GetContainer(IDependencyCollection) IDependencyCollectionExtensions.Configure(IDependencyCollection, HttpConfiguration)"
  },
  "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.html": {
    "href": "api/ioc/api/XPike.IoC.Microsoft.AspNetCore.html",
    "title": "Namespace XPike.IoC.Microsoft.AspNetCore | xPike",
    "keywords": "Namespace XPike.IoC.Microsoft.AspNetCore Classes IApplicationBuilderExtensions Extension methods for IApplicationBuilder to support xPike IoC in Asp.Net Core IServiceCollectionExtensions Extension methods for IServiceCollection to support XPike IOC in Asp.Net Core."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.WebApi.html",
    "title": "Namespace XPike.Extensions.DependencyInjection.WebApi | xPike",
    "keywords": "Namespace XPike.Extensions.DependencyInjection.WebApi Classes IServiceCollectionExtensions Extension methods for IServiceCollection to support using Microsoft.Extensions.DependencyInjection in ASP.Net WebAPI. MicrosoftDependencyResolver Class MicrosoftDependencyResolver. This class cannot be inherited. Implements the System.Web.Http.Dependencies.IDependencyResolver"
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceProviderExtensions.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceProviderExtensions.html",
    "title": "Class IServiceProviderExtensions | xPike",
    "keywords": "Class IServiceProviderExtensions Extension methods for IServiceProvider, to enhance the features and functionality of Microsoft.Extensions.DependencyInjection. Inheritance System.Object IServiceProviderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public static class IServiceProviderExtensions Methods View Source Verify(IServiceProvider) Verifies the dependency graph for completeness and valid dependency lifetimes. This method is thread-safe. Declaration public static void Verify(this IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider This IServiceProvider instance. Remarks This method also ensures that singletons only depend on other singletons and that scoped objects only depend on singletons and other scoped objects. Having a singleton depend on a transient object effectively makes that transient object a singleton and could result in undesired behavior. Examples public void Configure(IApplicationBuilder app, IHostingEnvironment env) { app.ApplicationServices.Verify(); ... app.UseMvc(); } Exceptions Type Condition System.InvalidOperationException The container has already been verified. System.InvalidOperationException IServiceCollection must be registerd in order to verify the provider. Verify() needs to obtain the list of registered services from the IServiceCollection instance. ServiceProviderVerificationException The container is invalid."
  },
  "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceCollectionExtensions.html": {
    "href": "api/extensions/api/XPike.Extensions.DependencyInjection.IServiceCollectionExtensions.html",
    "title": "Class IServiceCollectionExtensions | xPike",
    "keywords": "Class IServiceCollectionExtensions Extension methods for IServiceCollection. Inheritance System.Object IServiceCollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Extensions.DependencyInjection Assembly : XPike.Extensions.DependencyInjection.dll Syntax public static class IServiceCollectionExtensions Methods View Source AddServiceProviderVerification(IServiceCollection) Configures the service collection so it can later be verfied by the service provider. Declaration public static IServiceCollection AddServiceProviderVerification(this IServiceCollection services) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection services This IServicesCollection instance. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection IServiceCollection."
  },
  "api/configuration/api/XPike.Configuration.XPikeConfigBuilder.html": {
    "href": "api/configuration/api/XPike.Configuration.XPikeConfigBuilder.html",
    "title": "Class XPikeConfigBuilder | xPike",
    "keywords": "Class XPikeConfigBuilder Inheritance System.Object XPikeConfigBuilder Implements IXPikeConfigBuilder Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class XPikeConfigBuilder : IXPikeConfigBuilder Constructors | Improve this Doc View Source XPikeConfigBuilder() Declaration public XPikeConfigBuilder() Properties | Improve this Doc View Source ConfigurationService Declaration public IConfigurationService ConfigurationService { get; } Property Value Type Description IConfigurationService Methods | Improve this Doc View Source AddProvider(IConfigurationProvider) Declaration public IXPikeConfigBuilder AddProvider(IConfigurationProvider instance) Parameters Type Name Description IConfigurationProvider instance Returns Type Description IXPikeConfigBuilder | Improve this Doc View Source Build() Declaration public IConfigurationService Build() Returns Type Description IConfigurationService | Improve this Doc View Source ClearProviders() Declaration public IXPikeConfigBuilder ClearProviders() Returns Type Description IXPikeConfigBuilder Implements IXPikeConfigBuilder"
  },
  "api/configuration/api/XPike.Configuration.Microsoft.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.html",
    "title": "Namespace XPike.Configuration.Microsoft | xPike",
    "keywords": "Namespace XPike.Configuration.Microsoft Classes MicrosoftConfigurationProvider Provides configuration values to XPike by delegating lookups to the Microsoft.Extensions.Configuration.IConfiguration service. Package XPike Configuration - Microsoft.Extensions.Configuration Provider Package Dependencies: XPike.Configuration Singleton Registrations: IMicrosoftConfigurationProvier => MicrosoftConfigurationProvider Collection Registrations: IConfigurationProvider => IMicrosoftConfigurationProvider Interfaces IMicrosoftConfigurationProvider Represents a Configuration Provider that gets its settings from the Microsoft.Extensions.Configuration.IConfiguration service."
  },
  "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IConfigurationBuilderExtensions.html": {
    "href": "api/configuration/api/XPike.Configuration.Microsoft.AspNetCore.IConfigurationBuilderExtensions.html",
    "title": "Class IConfigurationBuilderExtensions | xPike",
    "keywords": "Class IConfigurationBuilderExtensions Inheritance System.Object IConfigurationBuilderExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Microsoft.AspNetCore Assembly : XPike.Configuration.Microsoft.AspNetCore.dll Syntax public static class IConfigurationBuilderExtensions Methods | Improve this Doc View Source AddXPikeConfiguration(IConfigurationBuilder, IConfigurationService) Adds XPike Configuration to the IConfigurationBuilder so that IConfiguration can retrieve configuration values from the XPike Configuration Service. Declaration public static IConfigurationBuilder AddXPikeConfiguration(this IConfigurationBuilder builder, IConfigurationService configService) Parameters Type Name Description IConfigurationBuilder builder IConfigurationService configService Returns Type Description IConfigurationBuilder | Improve this Doc View Source ConfigureXPikeConfiguration(IConfigurationBuilder, Action<IXPikeConfigBuilder>) Declaration public static IConfigurationBuilder ConfigureXPikeConfiguration(this IConfigurationBuilder builder, Action<IXPikeConfigBuilder> configBuilderSetup) Parameters Type Name Description IConfigurationBuilder builder System.Action < IXPikeConfigBuilder > configBuilderSetup Returns Type Description IConfigurationBuilder"
  },
  "api/configuration/api/XPike.Configuration.Memory.IMemoryConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Memory.IMemoryConfigurationProvider.html",
    "title": "Interface IMemoryConfigurationProvider | xPike",
    "keywords": "Interface IMemoryConfigurationProvider This interface represents a Configuration Provider that stores hard-coded settings in memory (such as a Dictionary<string, string>). Inherited Members IConfigurationProvider.GetValue(String) IConfigurationProvider.GetValue<T>(String) IConfigurationProvider.GetValueOrDefault(String, String) IConfigurationProvider.GetValueOrDefault<T>(String, T) IConfigurationLoader.Load() Namespace : XPike.Configuration.Memory Assembly : XPike.Configuration.dll Syntax public interface IMemoryConfigurationProvider : IConfigurationProvider, IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.IConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.IConfigurationProvider.html",
    "title": "Interface IConfigurationProvider | xPike",
    "keywords": "Interface IConfigurationProvider Defines a Configuration Provider, the most-granular source of configuration values in XPike. These are the basis of all of the functionality in XPike.Configuration and XPike.Settings. Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IConfigurationProvider Methods | Improve this Doc View Source GetValue(String) Retrieves a \"required\" Configuration Value from the specified Key. If no value exists, an InvalidConfigurationException will be thrown. Declaration string GetValue(string key) Parameters Type Name Description System.String key Returns Type Description System.String | Improve this Doc View Source GetValue<T>(String) Retrieves a \"required\" Configuration Value of the desired type T from the specified Key. If not value exists, or if conversion fails, an InvalidConfigurationException will be thrown. Declaration T GetValue<T>(string key) Parameters Type Name Description System.String key Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault(String, String) Retrieves an \"optional\" Configuration Value from the specified Key. If no value exists, the specified defaultValue will be returned instead. Declaration string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String | Improve this Doc View Source GetValueOrDefault<T>(String, T) Retrieves an \"optional\" Configuration Value of the desired type T from the specified Key. If no value exists, or if conversion fails, the specified defaultValue will be returned instead. Declaration T GetValueOrDefault<T>(string key, T defaultValue = null) Parameters Type Name Description System.String key T defaultValue Returns Type Description T Type Parameters Name Description T"
  },
  "api/configuration/api/XPike.Configuration.IConfigLoader-1.html": {
    "href": "api/configuration/api/XPike.Configuration.IConfigLoader-1.html",
    "title": "Interface IConfigLoader<TConfig> | xPike",
    "keywords": "Interface IConfigLoader<TConfig> Inherited Members IConfig<TConfig>.ConfigurationKey IConfig<TConfig>.Value IConfig<TConfig>.RetrievedUtc Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IConfigLoader<TConfig> : IConfig<TConfig> where TConfig : class Type Parameters Name Description TConfig"
  },
  "api/configuration/api/XPike.Configuration.IConfig-1.html": {
    "href": "api/configuration/api/XPike.Configuration.IConfig-1.html",
    "title": "Interface IConfig<TConfig> | xPike",
    "keywords": "Interface IConfig<TConfig> Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public interface IConfig<TConfig> where TConfig : class Type Parameters Name Description TConfig Properties | Improve this Doc View Source ConfigurationKey Declaration string ConfigurationKey { get; } Property Value Type Description System.String | Improve this Doc View Source RetrievedUtc Declaration DateTime RetrievedUtc { get; } Property Value Type Description System.DateTime | Improve this Doc View Source Value Declaration TConfig Value { get; } Property Value Type Description TConfig"
  },
  "api/configuration/api/XPike.Configuration.Environment.EnvironmentConfigurationProvider.html": {
    "href": "api/configuration/api/XPike.Configuration.Environment.EnvironmentConfigurationProvider.html",
    "title": "Class EnvironmentConfigurationProvider | xPike",
    "keywords": "Class EnvironmentConfigurationProvider Provides configuration values from environment variables. Uses System.Environment.GetEnvironmentVariable. Requested configuration keys will have all occurrences of \":\" replaced with \"_\". In other words, to set the value for \"MyLibrary::MySetting\", you would set the \"MyLibrary__MySetting\" environment variable. Inheritance System.Object ConfigurationProviderBase EnvironmentConfigurationProvider Implements IEnvironmentConfigurationProvider IConfigurationProvider IConfigurationLoader Inherited Members ConfigurationProviderBase.GetValue(String) ConfigurationProviderBase.GetValue<T>(String) ConfigurationProviderBase.GetValueOrDefault<T>(String, T) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration.Environment Assembly : XPike.Configuration.dll Syntax public class EnvironmentConfigurationProvider : ConfigurationProviderBase, IEnvironmentConfigurationProvider, IConfigurationProvider, IConfigurationLoader Methods | Improve this Doc View Source GetValueOrDefault(String, String) Declaration public override string GetValueOrDefault(string key, string defaultValue = null) Parameters Type Name Description System.String key System.String defaultValue Returns Type Description System.String Overrides ConfigurationProviderBase.GetValueOrDefault(String, String) | Improve this Doc View Source Load() Declaration public IDictionary<string, string> Load() Returns Type Description System.Collections.Generic.IDictionary < System.String , System.String > Implements IEnvironmentConfigurationProvider IConfigurationProvider IConfigurationLoader"
  },
  "api/configuration/api/XPike.Configuration.DefaultConfigManager-1.html": {
    "href": "api/configuration/api/XPike.Configuration.DefaultConfigManager-1.html",
    "title": "Class DefaultConfigManager<TConfig> | xPike",
    "keywords": "Class DefaultConfigManager<TConfig> Inheritance System.Object ConfigManager <TConfig> DefaultConfigManager<TConfig> Implements IConfigManager <TConfig> Inherited Members ConfigManager<TConfig>._configService ConfigManager<TConfig>._postConfigureAction ConfigManager<TConfig>.ConfigurationKey ConfigManager<TConfig>.PostConfigure(TConfig) ConfigManager<TConfig>.GetConfig() ConfigManager<TConfig>.GetConfigOrDefault(TConfig) ConfigManager<TConfig>.GetValue() ConfigManager<TConfig>.GetValueOrDefault<T>(String, T) ConfigManager<TConfig>.GetValue<T>(String) ConfigManager<TConfig>.GetValue(String) ConfigManager<TConfig>.GetValueOrDefault(String, String) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : XPike.Configuration Assembly : XPike.Configuration.dll Syntax public class DefaultConfigManager<TConfig> : ConfigManager<TConfig>, IConfigManager<TConfig> where TConfig : class Type Parameters Name Description TConfig Constructors | Improve this Doc View Source DefaultConfigManager(IConfigurationService) Declaration public DefaultConfigManager(IConfigurationService configurationService) Parameters Type Name Description IConfigurationService configurationService Implements IConfigManager<TConfig>"
  },
  "api/configuration/api/XPike.Configuration.Azure.Package.html": {
    "href": "api/configuration/api/XPike.Configuration.Azure.Package.html",
    "title": "Class Package | xPike",
    "keywords": "Class Package XPike Configuration - Azure App Configuration Services Provider Package Dependencies: XPike.Configuration Singleton Registrations: IAzureConfigurationProvider => AzureConfigurationProvider Collection Registrations: IConfigurationProvider += IAzureConfigurationProvider Inheritance System.Object Package Namespace : XPike.Configuration.Azure Assembly : XPike.Configuration.Azure.dll Syntax public class Package : IDependencyPackage Constructors | Improve this Doc View Source Package(String) Declaration public Package(string connectionString) Parameters Type Name Description System.String connectionString Methods | Improve this Doc View Source RegisterPackage(IDependencyCollection) Declaration public void RegisterPackage(IDependencyCollection dependencyCollection) Parameters Type Name Description IDependencyCollection dependencyCollection"
  },
  "api/configuration/api/Example.Library.SomeConfig.html": {
    "href": "api/configuration/api/Example.Library.SomeConfig.html",
    "title": "Class SomeConfig | xPike",
    "keywords": "Class SomeConfig Inheritance System.Object SomeConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Example.Library Assembly : Example.Library.dll Syntax public class SomeConfig Properties | Improve this Doc View Source Name Declaration public string Name { get; set; } Property Value Type Description System.String"
  }
}